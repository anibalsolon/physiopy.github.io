{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Physiopy","title":"Home"},{"location":"#physiopy","text":"","title":"Physiopy"},{"location":"best_practices/","text":"Best Practices for Collecting Physiological Data This document provides a succinct introduction to what physiological data are typically recorded during an fMRI experiment, how these signals are recorded, and how these signals can improve our modeling of fMRI time series data. This is an active field of research, and we encourage all users to get the latest recommendations prior to initiating a new study. For a more in-depth article on similar subject matter, please see Bulte and Wartolowska (2017) Neuroimage 154:81-91 . Why collect physiological data? Physiological monitoring is a key component of understanding physiological sources of signal variance in fMRI data. Monitoring physiology during scanning is critical to enable the characterization of a given subject's physiologic state at the time of the scan, and to track variations in physiology throughout the scan. With these data, we can more accurately model how these factors manifest in the fMRI signal time series. Physiological fluctuations can be identified as \"noise\" or as \"signals of interest\", depending on the research question of the imaging experiment. For most fMRI experiments, the goal is to isolate signal fluctuations that are associated with a neural stimulus and the resulting hemodynamic response (Caballero-Gaudes et al. 2016). In these data, it is important to model and remove signals with a non-neural origin, such as breathing or cardiac related signal variance. Removing these confounds will improve the sensitivity and confidence of the fMRI analysis. In some fMRI experiments, the goal is to characterize a physiologic effect (for example, studies that map cerebrovascular reactivity aim to quantify the dilation of blood vessels during certain non-neural stimuli) (Caballero-Gaudes et al. 2016). In these studies it is essential that the relevant physiologic parameters are recorded so that the analysis produces robust, quantitative physiological parameter maps. Another benefit of collecting physiological data is that it provides a method to monitor the subject and/or patient during the scan in real-time. Any sudden changes in the different aspects being monitored can help those in the control room identify if the person is under duress or complying with the scan protocol. Looking out for these changes is particularly helpful during an individual's first MRI scan, when they may react poorly to the scan environment. In some protocols, tracking physiology in real-time can ensure that values stay within safe, IRB-approved limits. Although current modeling of physiology is imperfect, and fMRI signal processing techniques do not yet accurately factor in all physiologic signals, the field continues to develop and our modeling continues to improve. We encourage all fMRI researchers to collect these data to more fully capture the variable human physiology inherent to imaging experiments. How are typical physiological data collected? The most common types of physiological data acquired in fMRI analysis are cardiac pulsation (pulse), breathing (chest position), and expired gas concentrations (particularly CO2 and O2). Cardiac pulsation can be collected via a sensor on the fingertip (or ear lobe, toe, or other pulse point). These devices are often known as a photoplethysmograph, and typically are included in the MRI scanner infrastructure. The data can thus be collected by the scanner, or recorded by a separate device. Typically the peaks of the cardiac pulsation trace are identified (e.g., the timing of each heart beat). Cardiac pulsation causes local movement artifacts, particularly around large arterial vessels, the edges of the ventricles, and in brainstem areas (Dagli et al. 1999). RETROICOR (Glover et al. 2000) is one cardiac denoising example, where the timing of each fMRI acquisition relative to the nearest cardiac peak is used to model and remove these local pulsation artifacts. Low frequency changes in heart rate have also been modeled and shown to influence the fMRI time series (Shmueli et al. 2007, Chang et al. 2009). Breathing is typically monitored using a \"respiratory belt\" around the participant's chest/diaphragm. The belt may be rigid or elastic, using MR compatible force or pressure transducers to generate a signal proportional to the chest diameter. The optimal positioning of the belt depends on the device being used, however it is best to be fairly consistent in how the belt is worn throughout a study. In some labs, multiple belts are used to better capture different types of breathing styles (e.g., \"chest breathing\" versus \"belly breathing\"). Often a belt is incorporated into the MRI scanner infrastructure, and these data can be collected by the scanner or recorded by a separate device. The peaks and troughs of the breathing trace are identified, which can provide information about breathing rate as well as breathing depth. There are three primary ways by which breathing can influence the fMRI signals. First, breathing often leads to bulk motion of the body and head (Brosch et al. 2002). These effects are typically modeled using volume registration and motion correction algorithms. Second, breathing changes the chest position which can influence the success of the shim, continuously changing B0 homogeneity throughout the scan and in turn affecting signal amplitude (Brosch et al. 2002, Raj et al. 2001). These effects are also modeled using techniques like RETROICOR. Thirdly, changing breathing rate and depth can influence blood gases, which can drive vasodilation or vasoconstriction, and thus substantially influence the fMRI signal amplitude (Chang and Glover 2009). RVT correction (Birn et al. 2008) estimates the change in breathing rate/depth to model these effects. Blood gases It is also possible (and recommended!) to directly record changes in blood gas levels, rather than infer them from a chest position measurement. Most commonly we measure carbon dioxide levels (CO2), which is a known vasodilator and can drive large variability in blood flow and the BOLD signal (Birn et al. 2006, Wise et al. 2004). We can also measure oxygen (O2) levels; O2 only has a mild vasoconstrictive effect on the cerebrovasculature, but O2 levels can directly influence BOLD signal contrast (Bulte et al. 2007). These two blood gases are typically strongly anticorrelated with each other in most scans, but can also be manipulated independently and influence the fMRI signals through distinct mechanisms (Floyd et al. 2003). Best practice would be to record both. Although the most accurate recordings of blood gas levels would be achieved through arterial sampling, this is not recommended for most imaging experiments. Instead, the concentrations of CO2 and O2 in arterial blood can be approximated by the partial pressure of each gas at the end of an exhalation, or the end-tidal partial pressure (commonly abbreviated as PETCO2 and PETO2) (Bengtsson et al. 2001, McSwain et al. 2010). The person being scanned wears a nasal cannula (soft plastic tube that rests just below the nostrils) or face mask that is connected to a gas analyzer in the control room. The resulting data shows the fluctuations in CO2 and O2 across every breath; an algorithm must extract the \"end-tidal\" values. What equipment is needed? Peripheral devices: finger photoplethysmograph (pulse-oximeter) respiratory belt disposable nasal cannula (or face mask) long sample line to connect from the scan room to the control room Some peripheral devices can be passed through a void in the penetration panel from the control room to the scan room (e.g., gas sampling line); others must be plugged into the penetration panel for noise filtering (e.g., some pulse sensors). Devices native to the MRI scanner may communicate wirelessly with the scanner. When adding non-native peripheral devices to the scanner environment, we recommend that you check that you are not bringing any outside noise into the scan room or bringing too much scanner noise into the physiological recordings. It may be necessary to develop additional devices or mechanisms to shield these connections. Recording devices: CO2 and O2 analyzer analog-to-digital converter (ADC) or other data acquisition (DAQ) device associated signal recording/analysis software For example, ADInstruments sells the Powerlab and uses LabChart software; Biopac sells the MP160 and uses AcqKnowledge software. It is also important to sync the physiological recordings with the fMRI scan triggers. To do this, it will be necessary to extract the trigger pulses from your MRI scanner, typically inputting these analog signals via BNC into the same ADC that is recording the physiological information. What to do with physiological data once they has been collected? Ideally you have recorded physiological data throughout the entire scan session, and have trigger data to identify when scanning occurred. Phys2bids can be used to organize the various physiological data traces that you have collected. With this program, your data will have the appropriate BIDS labels to describe physiological information. As a sanity check, you should quickly plot each trace to ensure that it matches the type of information you think you collected. After this restructuring of the data, there are numerous tools available to process each type of physiological trace, identifying end-tidal values for O2 and CO2, and phases of the cardiac and respiratory cycles. These data are then further processed via smoothing or convolution to create physiological regressors, which can be incorporated into a generalized linear model framework to explain portions of your fMRI signal attributed to physiological effects. References Bengtsson, J., Bake, B., Johansson, A., & Bengtson, J. P. (2001). End-tidal to arterial oxygen tension difference as an oxygenation index. Acta Anaesthesiologica Scandinavica, 45(3), 357--363. https://doi.org/10.1034/j.1399-6576.2001.045003357.x Birn, R. M., Diamond, J. B., Smith, M. A., & Bandettini, P. A. (2006). Separating respiratory-variation-related fluctuations from neuronal-activity-related fluctuations in fMRI. NeuroImage, 31(4), 1536--1548. https://doi.org/10.1016/j.neuroimage.2006.02.048 Birn, R. M., Smith, M. A., Jones, T. B., & Bandettini, P. A. (2008). The respiration response function: The temporal dynamics of fMRI signal fluctuations related to changes in respiration. NeuroImage, 40(2), 644--654. https://doi.org/10.1016/j.neuroimage.2007.11.059 Brosch, J. R., Talavage, T. M., Ulmer, J. L., & Nyenhuis, J. A. (2002). Simulation of human respiration in fMRI with a mechanical model. IEEE Transactions on Biomedical Engineering, 49(7), 700--707. https://doi.org/10.1109/TBME.2002.1010854 Bulte, D. P., Chiarelli, P. A., Wise, R. G., & Jezzard, P. (2007). Cerebral perfusion response to hyperoxia. Journal of Cerebral Blood Flow and Metabolism\u202f: Official Journal of the International Society of Cerebral Blood Flow and Metabolism, 27(1), 69--75. https://doi.org/10.1038/sj.jcbfm.9600319 Bulte, D., & Wartolowska, K. (2017). Monitoring cardiac and respiratory physiology during FMRI. NeuroImage, 154, 81--91. https://doi.org/10.1016/j.neuroimage.2016.12.001 Caballero-Gaudes, C., & Reynolds, R. C. (2017). Methods for cleaning the BOLD fMRI signal. NeuroImage, 154(December 2016), 128--149. https://doi.org/10.1016/j.neuroimage.2016.12.018 Chang, C., Cunningham, J. P., & Glover, G. H. (2009). Influence of heart rate on the BOLD signal: The cardiac response function. NeuroImage, 44(3), 857--869. https://doi.org/10.1016/j.neuroimage.2008.09.029 Chang, C., & Glover, G. H. (2009). Relationship between respiration, end-tidal CO2, and BOLD signals in resting-state fMRI. NeuroImage, 47(4), 1381--1393. https://doi.org/10.1016/j.neuroimage.2009.04.048 Dagli, M. S., Ingeholm, J. E., & Haxby, J. V. (1999). Localization of cardiac-induced signal change in fMRI. NeuroImage, 9(4), 407--415. https://doi.org/10.1006/nimg.1998.0424 Floyd, T. F., Clark, J. M., Gelfand, R., Detre, J. A., Ratcliffe, S., Guvakov, D., ... Eckenhoff, R. G. (2003). Independent cerebral vasoconstrictive effects of hyperoxia and accompanying arterial hypocapnia at 1 ATA. Journal of Applied Physiology, 95(6), 2453--2461. https://doi.org/10.1152/japplphysiol.00303.2003 Glover, G. H., Li, T., & Ress, D. (2000). Image\u2010based method for retrospective correction of physiological motion effects in fMRI: RETROICOR. Magnetic Resonance in Medicine, 44(1), 162--167. https://doi.org/10.1002/1522-2594(200007)44:1 \\<162::AID-MRM23>3.0.CO;2-E McSwain, S. D., Hamel, D. S., Smith, P. B., Gentile, M. A., Srinivasan, S., Meliones, J. N., & Cheifetz, I. M. (2010). End-tidal and arterial carbon dioxide measurements correlate across all levels of physiologic dead space. Respiratory Care, 55(3), 288--293. Raj, D., Anderson, A. W., & Gore, J. C. (2001). Respiratory effects in human functional magnetic resonance imaging due to bulk susceptibility changes. Phys. Med. Biol, 46, 3340. Shmueli, K., van Gelderen, P., de Zwart, J. A., Horovitz, S. G., Fukunaga, M., Jansma, J. M., & Duyn, J. H. (2007). Low-frequency fluctuations in the cardiac rate as a source of variance in the resting-state fMRI BOLD signal. NeuroImage, 38(2), 306--320. https://doi.org/10.1016/j.neuroimage.2007.07.037 Wise, R. G., Ide, K., Poulin, M. J., & Tracey, I. (2004). Resting fluctuations in arterial carbon dioxide induce significant low frequency variations in BOLD signal. NeuroImage, 21(4), 1652--1664. https://doi.org/10.1016/j.neuroimage.2003.11.025","title":"Best Practices"},{"location":"best_practices/#best-practices-for-collecting-physiological-data","text":"This document provides a succinct introduction to what physiological data are typically recorded during an fMRI experiment, how these signals are recorded, and how these signals can improve our modeling of fMRI time series data. This is an active field of research, and we encourage all users to get the latest recommendations prior to initiating a new study. For a more in-depth article on similar subject matter, please see Bulte and Wartolowska (2017) Neuroimage 154:81-91 .","title":"Best Practices for Collecting Physiological Data"},{"location":"best_practices/#why-collect-physiological-data","text":"Physiological monitoring is a key component of understanding physiological sources of signal variance in fMRI data. Monitoring physiology during scanning is critical to enable the characterization of a given subject's physiologic state at the time of the scan, and to track variations in physiology throughout the scan. With these data, we can more accurately model how these factors manifest in the fMRI signal time series. Physiological fluctuations can be identified as \"noise\" or as \"signals of interest\", depending on the research question of the imaging experiment. For most fMRI experiments, the goal is to isolate signal fluctuations that are associated with a neural stimulus and the resulting hemodynamic response (Caballero-Gaudes et al. 2016). In these data, it is important to model and remove signals with a non-neural origin, such as breathing or cardiac related signal variance. Removing these confounds will improve the sensitivity and confidence of the fMRI analysis. In some fMRI experiments, the goal is to characterize a physiologic effect (for example, studies that map cerebrovascular reactivity aim to quantify the dilation of blood vessels during certain non-neural stimuli) (Caballero-Gaudes et al. 2016). In these studies it is essential that the relevant physiologic parameters are recorded so that the analysis produces robust, quantitative physiological parameter maps. Another benefit of collecting physiological data is that it provides a method to monitor the subject and/or patient during the scan in real-time. Any sudden changes in the different aspects being monitored can help those in the control room identify if the person is under duress or complying with the scan protocol. Looking out for these changes is particularly helpful during an individual's first MRI scan, when they may react poorly to the scan environment. In some protocols, tracking physiology in real-time can ensure that values stay within safe, IRB-approved limits. Although current modeling of physiology is imperfect, and fMRI signal processing techniques do not yet accurately factor in all physiologic signals, the field continues to develop and our modeling continues to improve. We encourage all fMRI researchers to collect these data to more fully capture the variable human physiology inherent to imaging experiments.","title":"Why collect physiological data?"},{"location":"best_practices/#how-are-typical-physiological-data-collected","text":"The most common types of physiological data acquired in fMRI analysis are cardiac pulsation (pulse), breathing (chest position), and expired gas concentrations (particularly CO2 and O2). Cardiac pulsation can be collected via a sensor on the fingertip (or ear lobe, toe, or other pulse point). These devices are often known as a photoplethysmograph, and typically are included in the MRI scanner infrastructure. The data can thus be collected by the scanner, or recorded by a separate device. Typically the peaks of the cardiac pulsation trace are identified (e.g., the timing of each heart beat). Cardiac pulsation causes local movement artifacts, particularly around large arterial vessels, the edges of the ventricles, and in brainstem areas (Dagli et al. 1999). RETROICOR (Glover et al. 2000) is one cardiac denoising example, where the timing of each fMRI acquisition relative to the nearest cardiac peak is used to model and remove these local pulsation artifacts. Low frequency changes in heart rate have also been modeled and shown to influence the fMRI time series (Shmueli et al. 2007, Chang et al. 2009). Breathing is typically monitored using a \"respiratory belt\" around the participant's chest/diaphragm. The belt may be rigid or elastic, using MR compatible force or pressure transducers to generate a signal proportional to the chest diameter. The optimal positioning of the belt depends on the device being used, however it is best to be fairly consistent in how the belt is worn throughout a study. In some labs, multiple belts are used to better capture different types of breathing styles (e.g., \"chest breathing\" versus \"belly breathing\"). Often a belt is incorporated into the MRI scanner infrastructure, and these data can be collected by the scanner or recorded by a separate device. The peaks and troughs of the breathing trace are identified, which can provide information about breathing rate as well as breathing depth. There are three primary ways by which breathing can influence the fMRI signals. First, breathing often leads to bulk motion of the body and head (Brosch et al. 2002). These effects are typically modeled using volume registration and motion correction algorithms. Second, breathing changes the chest position which can influence the success of the shim, continuously changing B0 homogeneity throughout the scan and in turn affecting signal amplitude (Brosch et al. 2002, Raj et al. 2001). These effects are also modeled using techniques like RETROICOR. Thirdly, changing breathing rate and depth can influence blood gases, which can drive vasodilation or vasoconstriction, and thus substantially influence the fMRI signal amplitude (Chang and Glover 2009). RVT correction (Birn et al. 2008) estimates the change in breathing rate/depth to model these effects. Blood gases It is also possible (and recommended!) to directly record changes in blood gas levels, rather than infer them from a chest position measurement. Most commonly we measure carbon dioxide levels (CO2), which is a known vasodilator and can drive large variability in blood flow and the BOLD signal (Birn et al. 2006, Wise et al. 2004). We can also measure oxygen (O2) levels; O2 only has a mild vasoconstrictive effect on the cerebrovasculature, but O2 levels can directly influence BOLD signal contrast (Bulte et al. 2007). These two blood gases are typically strongly anticorrelated with each other in most scans, but can also be manipulated independently and influence the fMRI signals through distinct mechanisms (Floyd et al. 2003). Best practice would be to record both. Although the most accurate recordings of blood gas levels would be achieved through arterial sampling, this is not recommended for most imaging experiments. Instead, the concentrations of CO2 and O2 in arterial blood can be approximated by the partial pressure of each gas at the end of an exhalation, or the end-tidal partial pressure (commonly abbreviated as PETCO2 and PETO2) (Bengtsson et al. 2001, McSwain et al. 2010). The person being scanned wears a nasal cannula (soft plastic tube that rests just below the nostrils) or face mask that is connected to a gas analyzer in the control room. The resulting data shows the fluctuations in CO2 and O2 across every breath; an algorithm must extract the \"end-tidal\" values.","title":"How are typical physiological data collected?"},{"location":"best_practices/#what-equipment-is-needed","text":"Peripheral devices: finger photoplethysmograph (pulse-oximeter) respiratory belt disposable nasal cannula (or face mask) long sample line to connect from the scan room to the control room Some peripheral devices can be passed through a void in the penetration panel from the control room to the scan room (e.g., gas sampling line); others must be plugged into the penetration panel for noise filtering (e.g., some pulse sensors). Devices native to the MRI scanner may communicate wirelessly with the scanner. When adding non-native peripheral devices to the scanner environment, we recommend that you check that you are not bringing any outside noise into the scan room or bringing too much scanner noise into the physiological recordings. It may be necessary to develop additional devices or mechanisms to shield these connections. Recording devices: CO2 and O2 analyzer analog-to-digital converter (ADC) or other data acquisition (DAQ) device associated signal recording/analysis software For example, ADInstruments sells the Powerlab and uses LabChart software; Biopac sells the MP160 and uses AcqKnowledge software. It is also important to sync the physiological recordings with the fMRI scan triggers. To do this, it will be necessary to extract the trigger pulses from your MRI scanner, typically inputting these analog signals via BNC into the same ADC that is recording the physiological information.","title":"What equipment is needed?"},{"location":"best_practices/#what-to-do-with-physiological-data-once-they-has-been-collected","text":"Ideally you have recorded physiological data throughout the entire scan session, and have trigger data to identify when scanning occurred. Phys2bids can be used to organize the various physiological data traces that you have collected. With this program, your data will have the appropriate BIDS labels to describe physiological information. As a sanity check, you should quickly plot each trace to ensure that it matches the type of information you think you collected. After this restructuring of the data, there are numerous tools available to process each type of physiological trace, identifying end-tidal values for O2 and CO2, and phases of the cardiac and respiratory cycles. These data are then further processed via smoothing or convolution to create physiological regressors, which can be incorporated into a generalized linear model framework to explain portions of your fMRI signal attributed to physiological effects.","title":"What to do with physiological data once they has been collected?"},{"location":"best_practices/#references","text":"Bengtsson, J., Bake, B., Johansson, A., & Bengtson, J. P. (2001). End-tidal to arterial oxygen tension difference as an oxygenation index. Acta Anaesthesiologica Scandinavica, 45(3), 357--363. https://doi.org/10.1034/j.1399-6576.2001.045003357.x Birn, R. M., Diamond, J. B., Smith, M. A., & Bandettini, P. A. (2006). Separating respiratory-variation-related fluctuations from neuronal-activity-related fluctuations in fMRI. NeuroImage, 31(4), 1536--1548. https://doi.org/10.1016/j.neuroimage.2006.02.048 Birn, R. M., Smith, M. A., Jones, T. B., & Bandettini, P. A. (2008). The respiration response function: The temporal dynamics of fMRI signal fluctuations related to changes in respiration. NeuroImage, 40(2), 644--654. https://doi.org/10.1016/j.neuroimage.2007.11.059 Brosch, J. R., Talavage, T. M., Ulmer, J. L., & Nyenhuis, J. A. (2002). Simulation of human respiration in fMRI with a mechanical model. IEEE Transactions on Biomedical Engineering, 49(7), 700--707. https://doi.org/10.1109/TBME.2002.1010854 Bulte, D. P., Chiarelli, P. A., Wise, R. G., & Jezzard, P. (2007). Cerebral perfusion response to hyperoxia. Journal of Cerebral Blood Flow and Metabolism\u202f: Official Journal of the International Society of Cerebral Blood Flow and Metabolism, 27(1), 69--75. https://doi.org/10.1038/sj.jcbfm.9600319 Bulte, D., & Wartolowska, K. (2017). Monitoring cardiac and respiratory physiology during FMRI. NeuroImage, 154, 81--91. https://doi.org/10.1016/j.neuroimage.2016.12.001 Caballero-Gaudes, C., & Reynolds, R. C. (2017). Methods for cleaning the BOLD fMRI signal. NeuroImage, 154(December 2016), 128--149. https://doi.org/10.1016/j.neuroimage.2016.12.018 Chang, C., Cunningham, J. P., & Glover, G. H. (2009). Influence of heart rate on the BOLD signal: The cardiac response function. NeuroImage, 44(3), 857--869. https://doi.org/10.1016/j.neuroimage.2008.09.029 Chang, C., & Glover, G. H. (2009). Relationship between respiration, end-tidal CO2, and BOLD signals in resting-state fMRI. NeuroImage, 47(4), 1381--1393. https://doi.org/10.1016/j.neuroimage.2009.04.048 Dagli, M. S., Ingeholm, J. E., & Haxby, J. V. (1999). Localization of cardiac-induced signal change in fMRI. NeuroImage, 9(4), 407--415. https://doi.org/10.1006/nimg.1998.0424 Floyd, T. F., Clark, J. M., Gelfand, R., Detre, J. A., Ratcliffe, S., Guvakov, D., ... Eckenhoff, R. G. (2003). Independent cerebral vasoconstrictive effects of hyperoxia and accompanying arterial hypocapnia at 1 ATA. Journal of Applied Physiology, 95(6), 2453--2461. https://doi.org/10.1152/japplphysiol.00303.2003 Glover, G. H., Li, T., & Ress, D. (2000). Image\u2010based method for retrospective correction of physiological motion effects in fMRI: RETROICOR. Magnetic Resonance in Medicine, 44(1), 162--167. https://doi.org/10.1002/1522-2594(200007)44:1 \\<162::AID-MRM23>3.0.CO;2-E McSwain, S. D., Hamel, D. S., Smith, P. B., Gentile, M. A., Srinivasan, S., Meliones, J. N., & Cheifetz, I. M. (2010). End-tidal and arterial carbon dioxide measurements correlate across all levels of physiologic dead space. Respiratory Care, 55(3), 288--293. Raj, D., Anderson, A. W., & Gore, J. C. (2001). Respiratory effects in human functional magnetic resonance imaging due to bulk susceptibility changes. Phys. Med. Biol, 46, 3340. Shmueli, K., van Gelderen, P., de Zwart, J. A., Horovitz, S. G., Fukunaga, M., Jansma, J. M., & Duyn, J. H. (2007). Low-frequency fluctuations in the cardiac rate as a source of variance in the resting-state fMRI BOLD signal. NeuroImage, 38(2), 306--320. https://doi.org/10.1016/j.neuroimage.2007.07.037 Wise, R. G., Ide, K., Poulin, M. J., & Tracey, I. (2004). Resting fluctuations in arterial carbon dioxide induce significant low frequency variations in BOLD signal. NeuroImage, 21(4), 1652--1664. https://doi.org/10.1016/j.neuroimage.2003.11.025","title":"References"},{"location":"community/","text":"","title":"Welcome"},{"location":"community/CODE_OF_CONDUCT/","text":"Physiopy Code of Conduct Based on the Contributor Covenant Code of Conduct _. Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\\' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, creating and diffusing outreaching material (e.g. abstracts, posters, papers, demonstrations, ...), or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at s.moia@bcbl.eu All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the project community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder https://github.com/mozilla/diversity . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"community/CODE_OF_CONDUCT/#physiopy-code-of-conduct","text":"Based on the Contributor Covenant Code of Conduct _.","title":"Physiopy Code of Conduct"},{"location":"community/CODE_OF_CONDUCT/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"community/CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\\' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"community/CODE_OF_CONDUCT/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"community/CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, creating and diffusing outreaching material (e.g. abstracts, posters, papers, demonstrations, ...), or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"community/CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at s.moia@bcbl.eu All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"community/CODE_OF_CONDUCT/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"community/CODE_OF_CONDUCT/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"community/CODE_OF_CONDUCT/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"community/CODE_OF_CONDUCT/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"community/CODE_OF_CONDUCT/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the project community.","title":"4. Permanent Ban"},{"location":"community/CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder https://github.com/mozilla/diversity . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"community/contributor-guide/","text":"How to contribute to physiopy Welcome to the physiopy organisation! It's great news that you're thinking about contributing! Working with many people from many different places is great, but sometimes this means that code can become messy due to the many different ways a contribution can be made. For this reason, we have set up some guidelines for contributions - to help you get involved ASAP! If you lack knowledge in python development / github use / physiological data handling, don't be scared! Try to jump in anyway. Most of the original contributors learned these things exactly this way - jumping in and hoping to fall in the right way without breaking too many bones. Do you want to jump in but don't exactly know where/how? You can drop a few lines in gitter , so we can help you find something that suits you! Already know what you're looking for in this guide? Jump to the following sections: Aims of physiopy physiopy is a very young project developed by a bunch of researchers from the two different sides of the Atlantic Ocean (for now). Our main goal is to help collect, analyse and share physiological data, interfacing with (MRI) neuroimaging. We're trying to do so by: Writing packages to make a user-friendly pipeline to deal with physiological data. Writing packages that take into account the use of this physiological data in combination with neuroimaging (MRI) analysis. Providing documentation containing tips and strategies on how to collect such data and use our packages. Help set a standard for these data, albeit without forcing users to use it. Be an excuse for educational purposes on topics like Git/GitHub, Python3, physiology and related tools/topics. Joining the conversation We're trying to keep all conversation related to project development in GitHub issues . We maintain a gitter chat room for more informal conversations and general project updates. We also have a dev call once a month - specifically the second Thursday of the month! If you want to participate, drop a line in gitter! When interacting in the common channels, please adhere to our code of conduct . Contributions Contributing with small documentation changes If you are new to GitHub and just have a small documentation change recommendation (such as: typos detection, small improvements in the content, ...), please open an issue in the relative project, and label it with the \"Documentation\" label. Chances are those types of changes are easily doable with GitHub's online editor, which means you can do them, or ask for help from the developers! Contributing with user testing Another, non-coding friendly way to contribute to physiopy is by testing the packages. There are different kinds of tests, but to simplify things you can think mainly about automatic tests and user tests. To know more about Automatic tests , you can read the testing section . User testing are warm, human, emotional and opinionated tests that not only check that the code is doing what it needs to do, but also whether there's a better way to do it - namely better reports, clearer screen outputs, warnings and exceptions, unexpected bugs that have to be corrected. If you want to perform one, open an issue on GitHub or drop a comment in Gitter, refer to this blueprint and don't be afraid to ask questions! Contributing with test files At physiopy we always try to imagine and support every possible setting out there. However, our imagination has a limit - but if you think our packages should process a specific format/setting that you have, we're more than glad to do so! To make it happen, we need an example of the file we want to process, so you will have to share it with us (and the rest of the world)! The contribution can be a full file of data that you already acquired, a part of that file (pay attention to what is the minimum you need to share!), or mock data. The file contribution should come with a json file of the same name that contains the necessary information to run phys2bids on that file contribution. There is a json blueprint in OSF , you can download it and adapt it. Note that the frequency list has to be expressed in Hz as an integer or float. To contribute with a test file, open an Issue in GitHub and label it with Test . We'll help you add the file in our OSF space. We're extremely grateful for this type of contribution - so grateful that we asked allcontributors to add a dedicated category! Contributing documentation through GitHub We use readthedocs to create our documentation. Every contribution is welcome and it follows the same steps as a code contribution, explained below. Contributing code through GitHub This section covers 90% of the contributions a project like physiopy receives - code, documentation and tests. The best way to make this kind of contribution, in a nutshell, is to: 1. Open an issue with the intended modifications. 2. Label it, discuss it, (self-)assign it. 3. Open a Pull Request (PR) to resolve the issue and label it. 4. Wait for a review, discuss it or comply, repeat until ready. Issues and PR chats are great to maintain track of the conversation on the contribution. They are based upon GitHub-flavoured Markdown . GitHub has a helpful page on getting started with writing and formatting Markdown on GitHub . Contributing with Pull Requests Reviews A big challenge of software development is merging code accurately without having to wait too much time. For this reason, Reviewers for PRs are more than welcome! It is a task that requires some experience, but it's very necessary! Read the related section below to start! Issues and Milestones At physiopy , we use Issues and Milestones to keep track of and organise our workflow. Issues describe pieces of work that need to be completed to move the project forwards. We try to keep them as simple and clear as possible: an issue should describe a unitary, possibly small piece of work (unless it's about refactoring). Don't be scared of opening many issues at once, if it makes sense! Just check that what you're proposing is not listed in a previous issue (open or closed) yet (we don't like doubles). Issues get labelled. That helps the contributors to know what they're about. Check the label list to know what types are there, and use them accordingly! Issues can also be assigned . If you want to work on an assigned issue, ask permission first! - Milestones set the higher level workflow. They sketch deadlines and important releases. Issues are assigned to these milestones by the maintainers. If you feel that an issue should be assigned to a specific milestone but the maintainers have not done so, discuss it in the issue chat or in Gitter! We might have just missed it, or we might not (yet) see how it aligns with the overall project structure/milestone. Labels The current list of labels are here . They can be used for Issues , PRs , or both. We use auto to automate our semantic versioning and Pypi upload, so it's extremely important to use the right PR labels ! Issue & PR labels Improvements or additions to documentation. This category includes (but is not limited to) docs pages, docstrings, and code comments. Whatever this is, it exists already! Maybe it's a closed Issue/PR, that should be reopened. New features added or requested. This normally goes with a minormod label for PRs. As part of the scientific community, we care about outreach. Check the relevant section about it, but know that this Issue/PR contains information or tasks about abstracts, talks, demonstrations, papers. Issue or PR should not be worked on until the resolution of other issues or PRs. This Issue or PR has been released. This is for testing features, writing tests or producing testing code. Both user testing and CI testing! If you don't know where to start, start here! This is probably related to a milestone due soon! Issue-only labels This issue is suggested for BrainHack participants! Something isn't working. It either breaks the code or has an unexpected outcome. This issue contains information about the physiopy community (e.g. the next developer call) Discussion of a concept or implementation. These Issues are prone to be open ad infinitum. Jump in the conversation if you want! Good for newcomers. These issues calls for a fairly easy enhancement, or for a change that helps/requires getting to know the code better. They have educational value, and for this reason, unless urgent, experts in the topic should refrain from closing them - but help newcomers closing them. Dedicated to the hacktoberfest event, so that people can help and feel good about it (and show it with a T-shirt!). Such commits will not be recognised in the all-contributor table, unless otherwise specified . Extra attention is needed here! It's a good place to have a look! Improve nonfunctional attributes. Which means rewriting the code or the documentation to improve performance or just because there's a better way to express those lines. It might create a majormod PR. Further information is requested, from users to developers. Try to respond to this! This will not be worked on, until further notice. PR-only labels Labels for semantic release and changelogs These PRs close an issue labelled Bug . They also increase the semantic versioning for fixes (+0.0.1). Pull requests that update a dependency file See above. This PR won't trigger a release, but it will be reported in the changelog. These PRs call for a new major release (+1.0.0). This means that the PR is breaking backward compatibility. This PR generally closes an Enhancement issue. It increments the minor version (0.+1.0) This label should be used during development stages (<1.0.0) only. These PRs call for a new minor release during development (0.+1.0) that will break backward compatibility. This PR contains changes to the internal API. It won't trigger a release, but it will be reported in the changelog. See above. This PR won't trigger a release, but it will be reported in the changelog. This PR will not trigger a release. This PR will force the trigger of a release. Other labels : These PRs don't seem right. They actually seem so not right that they won't be further processed. This label invalidates a Hacktoberfest contribution. If you think this is wrong, start a discussion in the relevant issue (or open one if missing). Reviewers are asked to give an explanation for the use of this label. Good First Issues Good First Issues are issues that are either very simple, or that help the contributor get to know the programs or the languages better. We use it to help contributors with less experience to learn and familiarise with Git, GitHub, Python3, and physiology. We invite more expert contributors to avoid those issues, leave them to beginners and possibly help them out in the resolution of the issue. However, if the issue is left unassigned or unattended for long, and it's considered important or urgent, anyone can tackle it. Contribution workflow There are many descriptions of a good contribution workflow out there. For instance, we suggest to have a look at tedana's workflow . At physiopy , we follow a very similar workflow. The only three differences are: If you see an open issue that you would like to work on, check if it is assigned. If it is, ask the assignee if they need help or want to be substituted before starting to work on it. We ask you to test the code locally before merging it, and then, if possible, write some automatic tests for the code to be run in our Continuous Integration! Check the testing section below to know more. We suggest opening a draft PR as soon as you can - so it's easier for us to help you! See our complete documentation on the matter Pull Requests To improve understanding pull requests \"at a glance\" and use the power of auto , we use the labels listed above. Multiple labels can be assigned to a PR - in fact, all those that you think are relevant. We strongly advise to keep the changes you're introducing with your PR limited to your original goal. Adding to the scope of your PR little style corrections or code refactoring here and there in the code that you're already modifying is a great help, but when they become too much (and they are not relevant to your PR) they risk complicating the nature of the PR and the reviewing process. It is much better to open another PR with the objective of doing such corrections! Moreover, if you're tempted to assign more than one label that would trigger a release (e.g. bug and minormod or bug and majormod, etc.), you might want to split your PR instead. When opening a pull request, assign it at least one label. We encourage you to open a PR as soon as possible - even before you finish working on them. This is useful especially to you - so that you can receive comments and suggestions early on, rather than having to process a lot of comments in the final review step! However, if it's an incomplete PR, please open a Draft PR . That helps us process PRs by knowing which one to have a look first - and how picky to be when doing so. Reviewing PRs is a time consuming task and it can be stressful for both the reviewer and the author. Avoiding wasting time and the need of little fixes - such as fixing grammar mistakes and typos, styling code, or adopting conventions - is a good start for a successful (and quick) review. Before graduating a Draft PR to a PR ready for review, please check that: You did all you wanted to include in your PR. If at a later stage you realize something is missing and it's not a minor thing, you will need to open a new PR. If your contribution contains code or tests, you ran and passed all of the tests locally with pytest . If you're writing documentation, you built it locally with sphinx and the format is what you intended. Your code is harmonious with the rest of the code - no repetitions of any sort! Your code respects the adopted Style , especially if: Your code is lintered adequately and respects the PEP8 convention. Your docstrings follow the numpydoc convention. There are no typos or grammatical mistakes and the text is fluid. The code is sufficiently commented and the comments are clear. Your PR title is clear enough to be meaningful when appended to the version changelog. You have the correct labels. Before merging To be merged, PRs have to: Pass all the CircleCI tests, and possibly all the codecov checks. Have the necessary amount of approving reviews, even if you're a long time contributor. Note : You can ask one (or more) contributor to do that review, if you think they align more with the content of your PR. You need one review for documentation, tests, and small changes, and two reviews for bugs, refactoring and enhancements. 3. Have at least a release-related label (or a Skip release label). 4. Have a short title that clearly explains in one sentence the aim of the PR. 5. Contain at least a unit test for your contribution, if the PR contains code (it would be better if it contains an integration or function test and all the breaking tests necessary). If you're not confident about writing tests, it is possible to refer to an issue that asks for the test to be written, or another (Draft) PR that contains the tests required. As we're trying to maintain at least 90% code coverage, you're strongly encouraged to write all of the tests necessary to keep coverage above that threshold. If coverage drops too low, you might be asked to add more tests and/or your PR might be rejected. See the Automatic testing section. Don't merge your own pull request! That's a task for the main reviewer of your PR or the project manager. Remember that the project manager doesn't have to be a reviewer of your PR! Reviewing PRs Reviewing PRs is an extremely important task in collaborative development. In fact, it is probably the task that requires the most time in the development, and it can be stressful for both the reviewer and the author. Remember that, as a PR Reviewer, you are guaranteeing that the changes work and integrate well with the rest of the repository, hence you are responsible for the quality of the repository and its next version release . If they don't integrate well, later PR reviewers might have to ask for broader changes than expected. There are many best practices to review code online, for instance this medium blog post , but here are some good rules of thumbs that we need to follow while reviewing PRs: Be respectful to the PR authors and be clear in what you are asking/suggesting - remember that, like you, they are contributing their spare time and doing their best job! If there is a Draft PR , you can comment on its development in the message board or making \"Comment\" reviews. Don't ask for changes, and especially, don't approve the PR If the PR graduated from Draft to full PR , check that it follows the sections Pull requests and Style Guide of these guidelines. If not, invite the author to do so before starting a review. Don't limit your review to the parts that are changed . Look at the entire file, see if the changes fit well in it, and see if the changes are properly addressed everywhere in the code - in the documentation, in the tests, and in other functions. Sometimes the differences reported don't show the full impact of the PR in the repository! If your want to make Pull Requests an educational process, invite the author of the PR to make changes before actually doing them yourself. Request changes via comments or in the message board or by checking out the PR locally, making changes and then submitting a PR to the author's branch. If you decide to use the suggestion tool in reviews, or to start a PR to the branch under review, please alert the Project Manager. Bots might automatically assign you contribution types that will have to be removed (remember, your contribution in this case is \"Reviewer\"). Instead of starting a PR to the branch under review, think about opening a new PR with those modifications (unless they are needed to pass tests), and alert the Main Reviewer. In any case don't commit directly to the branch under review ! If you're reviewing documentation, build it locally with sphinx-build command. If you're asking for changes, don't approve the PR . Approve it only after everything was sufficiently addressed. Someone else might merge the PR in taking your word for granted. If you are the main reviewer, and the last reviewer required to approve the PR, merge the PR! Before approving and/or merging PRs, be sure that: All the tests in CircleCI/Azure pass without errors. Prefereably, codecov checks pass as well. If they don't, discuss what to do. The title describes the content of the PR clearly enough to be meaningful on its own - remember that it will appear in the version changelog! The PR has the appropriate labels to trigger the appropriate version release and update the contributors table. Main reviewer At physiopy we use the Assignees section of a PR to mark the main reviewer for that PR. The main reviewer is the primary person responsible for the quality of the repository and its next version release , as well as for the behaviour of the other reviewers . The main reviewer takes care of the reviewing process of the PR, in particular: Invites the reviewers to finish their review in a relatively short time. Checks that all elements of this document were respected, especially the part about Pull Requests . Invites other Reviewers to respect this document, especially the part about reviews , helps them in doing so, and checks that they do. If a Reviewer keeps not respecting this document, flags them to the project manager. Decides what to do in case of a coverage decrease (in codecov/patch ). In case of missing tests or updates to user documentation: Asks for more documentation or tests before approving the PR, or Checks that the appropriate issues have been opened to address the lack of documentation or tests (1 issue per item), or Double-checks that the title is clear and the labels are correct to trigger an appropriate auto release - feel free to change them. Main reviewer Is the one that is going to merge the PR. After the PR has been merged and a new release has been triggered, checks that: The documentation was updated correctly (if changed). The Pypi version of the repository coincides with the new release (if changed). New contributors or forms of contributions were correctly added in the README (if changed). Style Guide Docstrings should follow numpydoc convention. We encourage extensive documentation. The python code itself should follow PEP8 convention whenever possible: there are continuous integration tests checking that! You can use linters to help you write your code following style conventions. Linters are add-ons that you can run on the written script file. We suggest the use of flake8 for Python 3. Many editors (Atom, VScode, Sublimetext, ...) support addons for online lintering, which means you'll see warnings and errors while you write the code - check out if your does! Since we adopt auto , the PR title will be automatically reported as part of the changelog when updating versions. Try to describe in one (short) sentence what your PR is about - possibly using the imperative and starting with a capital letter. For instance, a good PR title could be: Implement support for <randomtype> files or Reorder dictionary entries , rather than <randomtype> support or reorders keys . Automatic Testing physiopy uses Continuous Integration (CI) to make life easier. In particular, we use the CircleCI platform to run automatic testing! Automatic tests are cold, robotic, emotionless, and opinionless tests that check that the program is doing what it is expected to. They are written by the developers and run (by CircleCI) every time they send a Pull Request to physiopy repositories. They complement the warm, human, emotional and opinionated user tests , as they tell us if a piece of code is failing. CircleCI uses pytest to run the tests. The great thing about it is that you can run it in advance on your local version of the code! We can measure the amount of code that is tested with codecov , which is an indication of how reliable our packages are! We try to maintain a 90% code coverage, and for this reason, PR should contain tests! The four main type of tests we use are: Unit tests : Unit tests check that a minimal piece of code is doing what it should be doing. Normally this means calling a function with some mock parameters and checking that the output is equal to the expected output. For example, to test a function that adds two given numbers together (1 and 3), we would call the function with those parameters, and check that the output is 4. Breaking tests Breaking tests are what you expect - they check that the program is breaking when it should. This means calling a function with parameters that are expected **not** to work, and check that it raises a proper error or warning. Integration tests Integration tests check that the code has an expected output, being blind to its content. This means that if the program should output a new file, the file exists - even if it's empty. This type of tests are normally run on real data and call the program itself. For instance, documentation PRs should check that the documentation page is produced! Functional tests If integration tests and unit tests could have babies, those would be functional tests. In practice, this kind of tests check that an output is produced, and *also* that it contains what it should contain. If a function should output a new file or an object, this test passes only if the file exists *and* it is like we expect it to be. They are run on real or mock data, and call the program itself or a function. Recognising contributors We welcome and recognize all contributions from documentation to testing to code development. You can see a list of current contributors in the README (kept up to date by the all contributors bot ). Thank you! --- Based on contributing guidelines from the STEMMRoleModels project.","title":"Contributor Guide"},{"location":"community/contributor-guide/#how-to-contribute-to-physiopy","text":"Welcome to the physiopy organisation! It's great news that you're thinking about contributing! Working with many people from many different places is great, but sometimes this means that code can become messy due to the many different ways a contribution can be made. For this reason, we have set up some guidelines for contributions - to help you get involved ASAP! If you lack knowledge in python development / github use / physiological data handling, don't be scared! Try to jump in anyway. Most of the original contributors learned these things exactly this way - jumping in and hoping to fall in the right way without breaking too many bones. Do you want to jump in but don't exactly know where/how? You can drop a few lines in gitter , so we can help you find something that suits you! Already know what you're looking for in this guide? Jump to the following sections:","title":"How to contribute to physiopy"},{"location":"community/contributor-guide/#aims-of-physiopy","text":"physiopy is a very young project developed by a bunch of researchers from the two different sides of the Atlantic Ocean (for now). Our main goal is to help collect, analyse and share physiological data, interfacing with (MRI) neuroimaging. We're trying to do so by: Writing packages to make a user-friendly pipeline to deal with physiological data. Writing packages that take into account the use of this physiological data in combination with neuroimaging (MRI) analysis. Providing documentation containing tips and strategies on how to collect such data and use our packages. Help set a standard for these data, albeit without forcing users to use it. Be an excuse for educational purposes on topics like Git/GitHub, Python3, physiology and related tools/topics.","title":"Aims of physiopy"},{"location":"community/contributor-guide/#joining-the-conversation","text":"We're trying to keep all conversation related to project development in GitHub issues . We maintain a gitter chat room for more informal conversations and general project updates. We also have a dev call once a month - specifically the second Thursday of the month! If you want to participate, drop a line in gitter! When interacting in the common channels, please adhere to our code of conduct .","title":"Joining the conversation"},{"location":"community/contributor-guide/#contributions","text":"","title":"Contributions"},{"location":"community/contributor-guide/#contributing-with-small-documentation-changes","text":"If you are new to GitHub and just have a small documentation change recommendation (such as: typos detection, small improvements in the content, ...), please open an issue in the relative project, and label it with the \"Documentation\" label. Chances are those types of changes are easily doable with GitHub's online editor, which means you can do them, or ask for help from the developers!","title":"Contributing with small documentation changes"},{"location":"community/contributor-guide/#contributing-with-user-testing","text":"Another, non-coding friendly way to contribute to physiopy is by testing the packages. There are different kinds of tests, but to simplify things you can think mainly about automatic tests and user tests. To know more about Automatic tests , you can read the testing section . User testing are warm, human, emotional and opinionated tests that not only check that the code is doing what it needs to do, but also whether there's a better way to do it - namely better reports, clearer screen outputs, warnings and exceptions, unexpected bugs that have to be corrected. If you want to perform one, open an issue on GitHub or drop a comment in Gitter, refer to this blueprint and don't be afraid to ask questions!","title":"Contributing with user testing"},{"location":"community/contributor-guide/#contributing-with-test-files","text":"At physiopy we always try to imagine and support every possible setting out there. However, our imagination has a limit - but if you think our packages should process a specific format/setting that you have, we're more than glad to do so! To make it happen, we need an example of the file we want to process, so you will have to share it with us (and the rest of the world)! The contribution can be a full file of data that you already acquired, a part of that file (pay attention to what is the minimum you need to share!), or mock data. The file contribution should come with a json file of the same name that contains the necessary information to run phys2bids on that file contribution. There is a json blueprint in OSF , you can download it and adapt it. Note that the frequency list has to be expressed in Hz as an integer or float. To contribute with a test file, open an Issue in GitHub and label it with Test . We'll help you add the file in our OSF space. We're extremely grateful for this type of contribution - so grateful that we asked allcontributors to add a dedicated category!","title":"Contributing with test files"},{"location":"community/contributor-guide/#contributing-documentation-through-github","text":"We use readthedocs to create our documentation. Every contribution is welcome and it follows the same steps as a code contribution, explained below.","title":"Contributing documentation through GitHub"},{"location":"community/contributor-guide/#contributing-code-through-github","text":"This section covers 90% of the contributions a project like physiopy receives - code, documentation and tests. The best way to make this kind of contribution, in a nutshell, is to: 1. Open an issue with the intended modifications. 2. Label it, discuss it, (self-)assign it. 3. Open a Pull Request (PR) to resolve the issue and label it. 4. Wait for a review, discuss it or comply, repeat until ready. Issues and PR chats are great to maintain track of the conversation on the contribution. They are based upon GitHub-flavoured Markdown . GitHub has a helpful page on getting started with writing and formatting Markdown on GitHub .","title":"Contributing code through GitHub"},{"location":"community/contributor-guide/#contributing-with-pull-requests-reviews","text":"A big challenge of software development is merging code accurately without having to wait too much time. For this reason, Reviewers for PRs are more than welcome! It is a task that requires some experience, but it's very necessary! Read the related section below to start!","title":"Contributing with Pull Requests Reviews"},{"location":"community/contributor-guide/#issues-and-milestones","text":"At physiopy , we use Issues and Milestones to keep track of and organise our workflow. Issues describe pieces of work that need to be completed to move the project forwards. We try to keep them as simple and clear as possible: an issue should describe a unitary, possibly small piece of work (unless it's about refactoring). Don't be scared of opening many issues at once, if it makes sense! Just check that what you're proposing is not listed in a previous issue (open or closed) yet (we don't like doubles). Issues get labelled. That helps the contributors to know what they're about. Check the label list to know what types are there, and use them accordingly! Issues can also be assigned . If you want to work on an assigned issue, ask permission first! - Milestones set the higher level workflow. They sketch deadlines and important releases. Issues are assigned to these milestones by the maintainers. If you feel that an issue should be assigned to a specific milestone but the maintainers have not done so, discuss it in the issue chat or in Gitter! We might have just missed it, or we might not (yet) see how it aligns with the overall project structure/milestone.","title":"Issues and Milestones"},{"location":"community/contributor-guide/#labels","text":"The current list of labels are here . They can be used for Issues , PRs , or both. We use auto to automate our semantic versioning and Pypi upload, so it's extremely important to use the right PR labels !","title":"Labels"},{"location":"community/contributor-guide/#issue-pr-labels","text":"Improvements or additions to documentation. This category includes (but is not limited to) docs pages, docstrings, and code comments. Whatever this is, it exists already! Maybe it's a closed Issue/PR, that should be reopened. New features added or requested. This normally goes with a minormod label for PRs. As part of the scientific community, we care about outreach. Check the relevant section about it, but know that this Issue/PR contains information or tasks about abstracts, talks, demonstrations, papers. Issue or PR should not be worked on until the resolution of other issues or PRs. This Issue or PR has been released. This is for testing features, writing tests or producing testing code. Both user testing and CI testing! If you don't know where to start, start here! This is probably related to a milestone due soon!","title":"Issue &amp; PR labels"},{"location":"community/contributor-guide/#issue-only-labels","text":"This issue is suggested for BrainHack participants! Something isn't working. It either breaks the code or has an unexpected outcome. This issue contains information about the physiopy community (e.g. the next developer call) Discussion of a concept or implementation. These Issues are prone to be open ad infinitum. Jump in the conversation if you want! Good for newcomers. These issues calls for a fairly easy enhancement, or for a change that helps/requires getting to know the code better. They have educational value, and for this reason, unless urgent, experts in the topic should refrain from closing them - but help newcomers closing them. Dedicated to the hacktoberfest event, so that people can help and feel good about it (and show it with a T-shirt!). Such commits will not be recognised in the all-contributor table, unless otherwise specified . Extra attention is needed here! It's a good place to have a look! Improve nonfunctional attributes. Which means rewriting the code or the documentation to improve performance or just because there's a better way to express those lines. It might create a majormod PR. Further information is requested, from users to developers. Try to respond to this! This will not be worked on, until further notice.","title":"Issue-only labels"},{"location":"community/contributor-guide/#pr-only-labels","text":"","title":"PR-only labels"},{"location":"community/contributor-guide/#labels-for-semantic-release-and-changelogs","text":"These PRs close an issue labelled Bug . They also increase the semantic versioning for fixes (+0.0.1). Pull requests that update a dependency file See above. This PR won't trigger a release, but it will be reported in the changelog. These PRs call for a new major release (+1.0.0). This means that the PR is breaking backward compatibility. This PR generally closes an Enhancement issue. It increments the minor version (0.+1.0) This label should be used during development stages (<1.0.0) only. These PRs call for a new minor release during development (0.+1.0) that will break backward compatibility. This PR contains changes to the internal API. It won't trigger a release, but it will be reported in the changelog. See above. This PR won't trigger a release, but it will be reported in the changelog. This PR will not trigger a release. This PR will force the trigger of a release.","title":"Labels for semantic release and changelogs"},{"location":"community/contributor-guide/#other-labels","text":": These PRs don't seem right. They actually seem so not right that they won't be further processed. This label invalidates a Hacktoberfest contribution. If you think this is wrong, start a discussion in the relevant issue (or open one if missing). Reviewers are asked to give an explanation for the use of this label.","title":"Other labels"},{"location":"community/contributor-guide/#good-first-issues","text":"Good First Issues are issues that are either very simple, or that help the contributor get to know the programs or the languages better. We use it to help contributors with less experience to learn and familiarise with Git, GitHub, Python3, and physiology. We invite more expert contributors to avoid those issues, leave them to beginners and possibly help them out in the resolution of the issue. However, if the issue is left unassigned or unattended for long, and it's considered important or urgent, anyone can tackle it.","title":"Good First Issues"},{"location":"community/contributor-guide/#contribution-workflow","text":"There are many descriptions of a good contribution workflow out there. For instance, we suggest to have a look at tedana's workflow . At physiopy , we follow a very similar workflow. The only three differences are: If you see an open issue that you would like to work on, check if it is assigned. If it is, ask the assignee if they need help or want to be substituted before starting to work on it. We ask you to test the code locally before merging it, and then, if possible, write some automatic tests for the code to be run in our Continuous Integration! Check the testing section below to know more. We suggest opening a draft PR as soon as you can - so it's easier for us to help you! See our complete documentation on the matter","title":"Contribution workflow"},{"location":"community/contributor-guide/#pull-requests","text":"To improve understanding pull requests \"at a glance\" and use the power of auto , we use the labels listed above. Multiple labels can be assigned to a PR - in fact, all those that you think are relevant. We strongly advise to keep the changes you're introducing with your PR limited to your original goal. Adding to the scope of your PR little style corrections or code refactoring here and there in the code that you're already modifying is a great help, but when they become too much (and they are not relevant to your PR) they risk complicating the nature of the PR and the reviewing process. It is much better to open another PR with the objective of doing such corrections! Moreover, if you're tempted to assign more than one label that would trigger a release (e.g. bug and minormod or bug and majormod, etc.), you might want to split your PR instead. When opening a pull request, assign it at least one label. We encourage you to open a PR as soon as possible - even before you finish working on them. This is useful especially to you - so that you can receive comments and suggestions early on, rather than having to process a lot of comments in the final review step! However, if it's an incomplete PR, please open a Draft PR . That helps us process PRs by knowing which one to have a look first - and how picky to be when doing so. Reviewing PRs is a time consuming task and it can be stressful for both the reviewer and the author. Avoiding wasting time and the need of little fixes - such as fixing grammar mistakes and typos, styling code, or adopting conventions - is a good start for a successful (and quick) review. Before graduating a Draft PR to a PR ready for review, please check that: You did all you wanted to include in your PR. If at a later stage you realize something is missing and it's not a minor thing, you will need to open a new PR. If your contribution contains code or tests, you ran and passed all of the tests locally with pytest . If you're writing documentation, you built it locally with sphinx and the format is what you intended. Your code is harmonious with the rest of the code - no repetitions of any sort! Your code respects the adopted Style , especially if: Your code is lintered adequately and respects the PEP8 convention. Your docstrings follow the numpydoc convention. There are no typos or grammatical mistakes and the text is fluid. The code is sufficiently commented and the comments are clear. Your PR title is clear enough to be meaningful when appended to the version changelog. You have the correct labels.","title":"Pull Requests"},{"location":"community/contributor-guide/#before-merging","text":"To be merged, PRs have to: Pass all the CircleCI tests, and possibly all the codecov checks. Have the necessary amount of approving reviews, even if you're a long time contributor. Note : You can ask one (or more) contributor to do that review, if you think they align more with the content of your PR. You need one review for documentation, tests, and small changes, and two reviews for bugs, refactoring and enhancements. 3. Have at least a release-related label (or a Skip release label). 4. Have a short title that clearly explains in one sentence the aim of the PR. 5. Contain at least a unit test for your contribution, if the PR contains code (it would be better if it contains an integration or function test and all the breaking tests necessary). If you're not confident about writing tests, it is possible to refer to an issue that asks for the test to be written, or another (Draft) PR that contains the tests required. As we're trying to maintain at least 90% code coverage, you're strongly encouraged to write all of the tests necessary to keep coverage above that threshold. If coverage drops too low, you might be asked to add more tests and/or your PR might be rejected. See the Automatic testing section. Don't merge your own pull request! That's a task for the main reviewer of your PR or the project manager. Remember that the project manager doesn't have to be a reviewer of your PR!","title":"Before merging"},{"location":"community/contributor-guide/#reviewing-prs","text":"Reviewing PRs is an extremely important task in collaborative development. In fact, it is probably the task that requires the most time in the development, and it can be stressful for both the reviewer and the author. Remember that, as a PR Reviewer, you are guaranteeing that the changes work and integrate well with the rest of the repository, hence you are responsible for the quality of the repository and its next version release . If they don't integrate well, later PR reviewers might have to ask for broader changes than expected. There are many best practices to review code online, for instance this medium blog post , but here are some good rules of thumbs that we need to follow while reviewing PRs: Be respectful to the PR authors and be clear in what you are asking/suggesting - remember that, like you, they are contributing their spare time and doing their best job! If there is a Draft PR , you can comment on its development in the message board or making \"Comment\" reviews. Don't ask for changes, and especially, don't approve the PR If the PR graduated from Draft to full PR , check that it follows the sections Pull requests and Style Guide of these guidelines. If not, invite the author to do so before starting a review. Don't limit your review to the parts that are changed . Look at the entire file, see if the changes fit well in it, and see if the changes are properly addressed everywhere in the code - in the documentation, in the tests, and in other functions. Sometimes the differences reported don't show the full impact of the PR in the repository! If your want to make Pull Requests an educational process, invite the author of the PR to make changes before actually doing them yourself. Request changes via comments or in the message board or by checking out the PR locally, making changes and then submitting a PR to the author's branch. If you decide to use the suggestion tool in reviews, or to start a PR to the branch under review, please alert the Project Manager. Bots might automatically assign you contribution types that will have to be removed (remember, your contribution in this case is \"Reviewer\"). Instead of starting a PR to the branch under review, think about opening a new PR with those modifications (unless they are needed to pass tests), and alert the Main Reviewer. In any case don't commit directly to the branch under review ! If you're reviewing documentation, build it locally with sphinx-build command. If you're asking for changes, don't approve the PR . Approve it only after everything was sufficiently addressed. Someone else might merge the PR in taking your word for granted. If you are the main reviewer, and the last reviewer required to approve the PR, merge the PR! Before approving and/or merging PRs, be sure that: All the tests in CircleCI/Azure pass without errors. Prefereably, codecov checks pass as well. If they don't, discuss what to do. The title describes the content of the PR clearly enough to be meaningful on its own - remember that it will appear in the version changelog! The PR has the appropriate labels to trigger the appropriate version release and update the contributors table.","title":"Reviewing PRs"},{"location":"community/contributor-guide/#main-reviewer","text":"At physiopy we use the Assignees section of a PR to mark the main reviewer for that PR. The main reviewer is the primary person responsible for the quality of the repository and its next version release , as well as for the behaviour of the other reviewers . The main reviewer takes care of the reviewing process of the PR, in particular: Invites the reviewers to finish their review in a relatively short time. Checks that all elements of this document were respected, especially the part about Pull Requests . Invites other Reviewers to respect this document, especially the part about reviews , helps them in doing so, and checks that they do. If a Reviewer keeps not respecting this document, flags them to the project manager. Decides what to do in case of a coverage decrease (in codecov/patch ). In case of missing tests or updates to user documentation: Asks for more documentation or tests before approving the PR, or Checks that the appropriate issues have been opened to address the lack of documentation or tests (1 issue per item), or Double-checks that the title is clear and the labels are correct to trigger an appropriate auto release - feel free to change them. Main reviewer Is the one that is going to merge the PR. After the PR has been merged and a new release has been triggered, checks that: The documentation was updated correctly (if changed). The Pypi version of the repository coincides with the new release (if changed). New contributors or forms of contributions were correctly added in the README (if changed).","title":"Main reviewer"},{"location":"community/contributor-guide/#style-guide","text":"Docstrings should follow numpydoc convention. We encourage extensive documentation. The python code itself should follow PEP8 convention whenever possible: there are continuous integration tests checking that! You can use linters to help you write your code following style conventions. Linters are add-ons that you can run on the written script file. We suggest the use of flake8 for Python 3. Many editors (Atom, VScode, Sublimetext, ...) support addons for online lintering, which means you'll see warnings and errors while you write the code - check out if your does! Since we adopt auto , the PR title will be automatically reported as part of the changelog when updating versions. Try to describe in one (short) sentence what your PR is about - possibly using the imperative and starting with a capital letter. For instance, a good PR title could be: Implement support for <randomtype> files or Reorder dictionary entries , rather than <randomtype> support or reorders keys .","title":"Style Guide"},{"location":"community/contributor-guide/#automatic-testing","text":"physiopy uses Continuous Integration (CI) to make life easier. In particular, we use the CircleCI platform to run automatic testing! Automatic tests are cold, robotic, emotionless, and opinionless tests that check that the program is doing what it is expected to. They are written by the developers and run (by CircleCI) every time they send a Pull Request to physiopy repositories. They complement the warm, human, emotional and opinionated user tests , as they tell us if a piece of code is failing. CircleCI uses pytest to run the tests. The great thing about it is that you can run it in advance on your local version of the code! We can measure the amount of code that is tested with codecov , which is an indication of how reliable our packages are! We try to maintain a 90% code coverage, and for this reason, PR should contain tests! The four main type of tests we use are: Unit tests : Unit tests check that a minimal piece of code is doing what it should be doing. Normally this means calling a function with some mock parameters and checking that the output is equal to the expected output. For example, to test a function that adds two given numbers together (1 and 3), we would call the function with those parameters, and check that the output is 4. Breaking tests Breaking tests are what you expect - they check that the program is breaking when it should. This means calling a function with parameters that are expected **not** to work, and check that it raises a proper error or warning. Integration tests Integration tests check that the code has an expected output, being blind to its content. This means that if the program should output a new file, the file exists - even if it's empty. This type of tests are normally run on real data and call the program itself. For instance, documentation PRs should check that the documentation page is produced! Functional tests If integration tests and unit tests could have babies, those would be functional tests. In practice, this kind of tests check that an output is produced, and *also* that it contains what it should contain. If a function should output a new file or an object, this test passes only if the file exists *and* it is like we expect it to be. They are run on real or mock data, and call the program itself or a function.","title":"Automatic Testing"},{"location":"community/contributor-guide/#recognising-contributors","text":"We welcome and recognize all contributions from documentation to testing to code development. You can see a list of current contributors in the README (kept up to date by the all contributors bot ). Thank you! --- Based on contributing guidelines from the STEMMRoleModels project.","title":"Recognising contributors"},{"location":"community/contributorfile/","text":"How to contribute to physiopy Welcome to the physiopy organisation! It's great news that you're thinking about contributing! Working with many people from many different places is great, but sometimes this means that code can become messy due to the many different ways a contribution can be made. For this reason, we have set up some guidelines for contributions - to help you get involved ASAP! If you lack knowledge in python development / github use / physiological data handling, don't be scared! Try to jump in anyway. Most of the original contributors learned these things exactly this way - jumping in and hoping to fall in the right way without breaking too many bones. Do you want to jump in but don't exactly know where/how? You can drop a few lines in gitter , so we can help you find something that suits you! Already know what you\\'re looking for in this guide? Jump to the following sections: Aims of physiopy Join the conversation Contributions Contributing with small documentation changes Contributing with User testing Contributing with test files Contributing documentation through GitHub Contributing code through GitHub Contributing with Pull Requests Review Issues and Milestones Labels Issues & PRs labels Issues labels PRs labels Good First Issues Contribution workflow Pull Requests Reviewing PRs Style Guide Automatic Testing Recognizing contributors Aims of physiopy physiopy is a very young project developed by a bunch of researchers from the two different sides of the Atlantic Ocean (for now). Our main goal is to help collect, analyse and share physiological data, interfacing with (MRI) neuroimaging. We're trying to do so by: Writing packages to make a user-friendly pipeline to deal with physiological data. Writing packages that take into account the use of this physiological data in combination with neuroimaging (MRI) analysis. Providing documentation containing tips and strategies on how to collect such data and use our packages. Help set a standard for these data, albeit without forcing users to use it. Be an excuse for educational purposes on topics like Git/GitHub, Python3, physiology and related tools/topics. Joining the conversation We're trying to keep all conversation related to project development in GitHub issues . We maintain a gitter chat room for more informal conversations and general project updates. We also have a dev call once a month - specifically the second Thursday of the month! If you want to participate, drop a line in gitter! When interacting in the common channels, please adhere to our code of conduct . Contributions Contributing with small documentation changes If you are new to GitHub and just have a small documentation change recommendation (such as: typos detection, small improvements in the content, ...), please open an issue in the relative project, and label it with the \"Documentation\" label. Chances are those types of changes are easily doable with GitHub\\'s online editor, which means you can do them, or ask for help from the developers! Contributing with User testing Another, non-coding friendly way to contribute to physiopy is by testing the packages. There are different kinds of tests, but to simplify things you can think mainly about automatic tests and user tests. To know more about Automatic tests , you can read the testing section . User testing are warm, human, emotional and opinionated tests that not only check that the code is doing what it needs to do, but also whether there's a better way to do it - namely better reports, clearer screen outputs, warnings and exceptions, unexpected bugs that have to be corrected. If you want to perform one, open an issue on GitHub or drop a comment in Gitter, refer to this blueprint and don't be afraid to ask questions! Contributing with test files At physiopy we always try to imagine and support every possible setting out there. However, our imagination has a limit - but if you think our packages should process a specific format/setting that you have, we're more than glad to do so! To make it happen, we need an example of the file we want to process, so you will have to share it with us (and the rest of the world)! The contribution can be a full file of data that you already acquired, a part of that file (pay attention to what is the minimum you need to share!), or mock data. The file contribution should come with a json file of the same name that contains the necessary information to run phys2bids on that file contribution. There is a json blueprint in OSF , you can download it and adapt it. Note that the frequency list has to be expressed in Hz as an integer or float. To contribute with a test file, open an Issue in GitHub and label it with Test . We'll help you add the file in our OSF space. We're extremely grateful for this type of contribution - so grateful that we asked allcontributors to add a dedicated category! Contributing documentation through GitHub We use readthedocs to create our documentation. Every contribution is welcome and it follows the same steps as a code contribution, explained below. Contributing code through GitHub This section covers 90% of the contributions a project like physiopy receives - code, documentation and tests. The best way to make this kind of contribution, in a nutshell, is to: 1. Open an issue with the intended modifications. 2. Label it, discuss it, (self-)assign it. 3. Open a Pull Request (PR) to resolve the issue and label it. 4. Wait for a review, discuss it or comply, repeat until ready. Issues and PR chats are great to maintain track of the conversation on the contribution. They are based upon GitHub-flavoured Markdown . GitHub has a helpful page on getting started with writing and formatting Markdown on GitHub . Contributing with Pull Requests Reviews A big challenge of software development is merging code accurately without having to wait too much time. For this reason, Reviewers for PRs are more than welcome! It is a task that requires some experience, but it's very necessary! Read the related section below to start! Issues and Milestones At physiopy , we use Issues and Milestones to keep track of and organise our workflow. Issues describe pieces of work that need to be completed to move the project forwards. We try to keep them as simple and clear as possible: an issue should describe a unitary, possibly small piece of work (unless it's about refactoring). Don't be scared of opening many issues at once, if it makes sense! Just check that what you're proposing is not listed in a previous issue (open or closed) yet (we don't like doubles). Issues get labelled. That helps the contributors to know what they're about. Check the label list to know what types are there, and use them accordingly! Issues can also be assigned . If you want to work on an assigned issue, ask permission first! - Milestones set the higher level workflow. They sketch deadlines and important releases. Issues are assigned to these milestones by the maintainers. If you feel that an issue should be assigned to a specific milestone but the maintainers have not done so, discuss it in the issue chat or in Gitter! We might have just missed it, or we might not (yet) see how it aligns with the overall project structure/milestone. Labels The current list of labels are here . They can be used for Issues , PRs , or both. We use auto to automate our semantic versioning and Pypi upload, so it\\'s extremely important to use the right PR labels ! Issue & PR labels Documentation: Improvements or additions to documentation. This category includes (but is not limited to) docs pages, docstrings, and code comments. Duplicate: Whatever this is, it exists already! Maybe it's a closed Issue/PR, that should be reopened. Enhancement: New features added or requested. This normally goes with a minormod label for PRs. Outreach: As part of the scientific community, we care about outreach. Check the relevant section about it, but know that this Issue/PR contains information or tasks about abstracts, talks, demonstrations, papers. Paused: Issue or PR should not be worked on until the resolution of other issues or PRs. Testing: This is for testing features, writing tests or producing testing code. Both user testing and CI testing! Urgent: If you don\\'t know where to start, start here! This is probably related to a milestone due soon! Issue-only labels Bug: Something isn't working. It either breaks the code or has an unexpected outcome. Community: This issue contains information about the physiopy community (e.g. the next developer call) Discussion: Discussion of a concept or implementation. These Issues are prone to be open ad infinitum. Jump in the conversation if you want! Good first issue: Good for newcomers. These issues calls for a fairly easy enhancement, or for a change that helps/requires getting to know the code better. They have educational value, and for this reason, unless urgent, experts in the topic should refrain from closing them - but help newcomers closing them. Hacktoberfest: Dedicated to the hacktoberfest event, so that people can help and feel good about it (and show it with a T-shirt!). Such commits will not be recognised in the all-contributor table, unless otherwise specified . Help wanted: Extra attention is needed here! It's a good place to have a look! Refactoring: Improve nonfunctional attributes. Which means rewriting the code or the documentation to improve performance or just because there's a better way to express those lines. It might create a majormod PR. Question: Further information is requested, from users to developers. Try to respond to this! Wontfix: This will not be worked on, until further notice. PR-only labels Labels for semantic release and changelogs Majormod: These PRs call for a new major release (+1.0.0). This means that the PR is breaking backward compatibility. Minormod: These PRs call for a new minor release (0.+1.0). This means that the PR is not breaking backward compatibility. BugFIX: These PRs close an issue labelled bug . They also increase the semantic versioning for fixes (+0.0.1). Internal: This PR contains changes to the internal API. It won\\'t trigger a release, but it will be reported in the changelog. Documentation: See above. This PR won\\'t trigger a release, but it will be reported in the changelog. Testing: See above. This PR won\\'t trigger a release, but it will be reported in the changelog. Skip release: This PR will not trigger a release. Release: This PR will force the trigger of a release. Other labels Invalid: These PRs don't seem right. They actually seem so not right that they won't be further processed. This label invalidates a Hacktoberfest contribution. If you think this is wrong, start a discussion in the relevant issue (or open one if missing). Reviewers are asked to give an explanation for the use of this label. Good First Issues Good First Issues are issues that are either very simple, or that help the contributor get to know the programs or the languages better. We use it to help contributors with less experience to learn and familiarise with Git, GitHub, Python3, and physiology. We invite more expert contributors to avoid those issues, leave them to beginners and possibly help them out in the resolution of the issue. However, if the issue is left unassigned or unattended for long, and it's considered important or urgent, anyone can tackle it. Contribution workflow There are many descriptions of a good contribution workflow out there. For instance, we suggest to have a look at tedana's workflow . At physiopy , we follow a very similar workflow. The only three differences are: If you see an open issue that you would like to work on, check if it is assigned. If it is, ask the assignee if they need help or want to be substituted before starting to work on it. We ask you to test the code locally before merging it, and then, if possible, write some automatic tests for the code to be run in our Continuous Integration! Check the testing section below to know more. We suggest opening a draft PR as soon as you can - so it's easier for us to help you! See our complete documentation on the matter Pull Requests To improve understanding pull requests \\\"at a glance\\\" and use the power of auto , we use the labels listed above. Multiple labels can be assigned to a PR - in fact, all those that you think are relevant. We strongly advise to keep the changes you\\'re introducing with your PR limited to your original goal. Adding to the scope of your PR little style corrections or code refactoring here and there in the code that you\\'re already modifying is a great help, but when they become too much (and they are not relevant to your PR) they risk complicating the nature of the PR and the reviewing process. It is much better to open another PR with the objective of doing such corrections! Moreover, if you\\'re tempted to assign more than one label that would trigger a release (e.g. bug and minormod or bug and majormod, etc.), you might want to split your PR instead. When opening a pull request, assign it at least one label. We encourage you to open a PR as soon as possible - even before you finish working on them. This is useful especially to you - so that you can receive comments and suggestions early on, rather than having to process a lot of comments in the final review step! However, if it's an incomplete PR, please open a Draft PR . That helps us process PRs by knowing which one to have a look first - and how picky to be when doing so. Reviewing PRs is a time consuming task and it can be stressful for both the reviewer and the author. Avoiding wasting time and the need of little fixes - such as fixing grammar mistakes and typos, styling code, or adopting conventions - is a good start for a successful (and quick) review. Before graduating a Draft PR to a PR ready for review, please check that: You did all you wanted to include in your PR. If at a later stage you realize something is missing and it's not a minor thing, you will need to open a new PR. If your contribution contains code or tests, you ran and passed all of the tests locally with pytest . If you're writing documentation, you built it locally with sphinx and the format is what you intended. Your code is harmonious with the rest of the code - no repetitions of any sort! Your code respects the adopted Style , especially if: Your code is lintered adequately and respects the PEP8 convention. Your docstrings follow the numpydoc convention. There are no typos or grammatical mistakes and the text is fluid. The code is sufficiently commented and the comments are clear. Your PR title is clear enough to be meaningful when appended to the version changelog. You have the correct labels. To be merged, PRs have to: Pass all the CircleCI tests, and possibly all the codecov checks. Have the necessary amount of approving reviews, even if you're a long time contributor. Note : You can ask one (or more) contributor to do that review, if you think they align more with the content of your PR. You need one review for documentation, tests, and small changes, and two reviews for bugs, refactoring and enhancements. 3. Have at least a release-related label (or a Skip release label). 4. Have a short title that clearly explains in one sentence the aim of the PR. 5. Contain at least a unit test for your contribution, if the PR contains code (it would be better if it contains an integration or function test and all the breaking tests necessary). If you're not confident about writing tests, it is possible to refer to an issue that asks for the test to be written, or another (Draft) PR that contains the tests required. As we're trying to maintain at least 90% code coverage, you're strongly encouraged to write all of the tests necessary to keep coverage above that threshold. If coverage drops too low, you might be asked to add more tests and/or your PR might be rejected. See the Automatic testing section. Don't merge your own pull request! That\\'s a task for the main reviewer of your PR or the project manager. Remember that the project manager doesn't have to be a reviewer of your PR! Reviewing PRs Reviewing PRs is an extremely important task in collaborative development. In fact, it is probably the task that requires the most time in the development, and it can be stressful for both the reviewer and the author. Remember that, as a PR Reviewer, you are guaranteeing that the changes work and integrate well with the rest of the repository, hence you are responsible for the quality of the repository and its next version release . If they don\\'t integrate well, later PR reviewers might have to ask for broader changes than expected. There are many best practices to review code online, for instance this medium blog post , but here are some good rules of thumbs that we need to follow while reviewing PRs: Be respectful to the PR authors and be clear in what you are asking/suggesting - remember that, like you, they are contributing their spare time and doing their best job! If there is a Draft PR , you can comment on its development in the message board or making \"Comment\" reviews. Don't ask for changes, and especially, don't approve the PR If the PR graduated from Draft to full PR , check that it follows the sections Pull requests and Style Guide of these guidelines. If not, invite the author to do so before starting a review. Don't limit your review to the parts that are changed . Look at the entire file, see if the changes fit well in it, and see if the changes are properly addressed everywhere in the code - in the documentation, in the tests, and in other functions. Sometimes the differences reported don't show the full impact of the PR in the repository! If your want to make Pull Requests an educational process, invite the author of the PR to make changes before actually doing them yourself. Request changes via comments or in the message board or by checking out the PR locally, making changes and then submitting a PR to the author's branch. If you decide to use the suggestion tool in reviews, or to start a PR to the branch under review, please alert the Project Manager. Bots might automatically assign you contribution types that will have to be removed (remember, your contribution in this case is \"Reviewer\"). Instead of starting a PR to the branch under review, think about opening a new PR with those modifications (unless they are needed to pass tests), and alert the Main Reviewer. In any case don't commit directly to the branch under review ! If you're reviewing documentation, build it locally with sphinx-build command. If you're asking for changes, don't approve the PR . Approve it only after everything was sufficiently addressed. Someone else might merge the PR in taking your word for granted. If you are the main reviewer, and the last reviewer required to approve the PR, merge the PR! Before approving and/or merging PRs, be sure that: All the tests in CircleCI/Azure pass without errors. Prefereably, codecov checks pass as well. If they don\\'t, discuss what to do. The title describes the content of the PR clearly enough to be meaningful on its own - remember that it will appear in the version changelog! The PR has the appropriate labels to trigger the appropriate version release and update the contributors table. Main reviewer At physiopy we use the Assignees section of a PR to mark the main reviewer for that PR. The main reviewer is the primary person responsible for the quality of the repository and its next version release , as well as for the behaviour of the other reviewers . The main reviewer takes care of the reviewing process of the PR, in particular: Invites the reviewers to finish their review in a relatively short time. Checks that all elements of this document were respected, especially the part about Pull Requests . Invites other Reviewers to respect this document, especially the part about reviews , helps them in doing so, and checks that they do. If a Reviewer keeps not respecting this document, flags them to the project manager. Decides what to do in case of a coverage decrease (in codecov/patch ). In case of missing tests or updates to user documentation: Asks for more documentation or tests before approving the PR, or Checks that the appropriate issues have been opened to address the lack of documentation or tests (1 issue per item), or Double-checks that the title is clear and the labels are correct to trigger an appropriate auto release - feel free to change them. Main reviewer Is the one that is going to merge the PR. After the PR has been merged and a new release has been triggered, checks that: The documentation was updated correctly (if changed). The Pypi version of the repository coincides with the new release (if changed). New contributors or forms of contributions were correctly added in the README (if changed). Style Guide Docstrings should follow numpydoc convention. We encourage extensive documentation. The python code itself should follow PEP8 convention whenever possible: there are continuous integration tests checking that! You can use linters to help you write your code following style conventions. Linters are add-ons that you can run on the written script file. We suggest the use of flake8 for Python 3. Many editors (Atom, VScode, Sublimetext, ...) support addons for online lintering, which means you'll see warnings and errors while you write the code - check out if your does! Since we adopt auto , the PR title will be automatically reported as part of the changelog when updating versions. Try to describe in one (short) sentence what your PR is about - possibly using the imperative and starting with a capital letter. For instance, a good PR title could be: Implement support for <randomtype> files or Reorder dictionary entries , rather than <randomtype> support or reorders keys . Automatic Testing physiopy uses Continuous Integration (CI) to make life easier. In particular, we use the CircleCI platform to run automatic testing! Automatic tests are cold, robotic, emotionless, and opinionless tests that check that the program is doing what it is expected to. They are written by the developers and run (by CircleCI) every time they send a Pull Request to physiopy repositories. They complement the warm, human, emotional and opinionated user tests , as they tell us if a piece of code is failing. CircleCI uses pytest to run the tests. The great thing about it is that you can run it in advance on your local version of the code! We can measure the amount of code that is tested with codecov , which is an indication of how reliable our packages are! We try to maintain a 90% code coverage, and for this reason, PR should contain tests! The four main type of tests we use are: Unit tests : Unit tests check that a minimal piece of code is doing what it should be doing. Normally this means calling a function with some mock parameters and checking that the output is equal to the expected output. For example, to test a function that adds two given numbers together (1 and 3), we would call the function with those parameters, and check that the output is 4. Breaking tests Breaking tests are what you expect - they check that the program is breaking when it should. This means calling a function with parameters that are expected **not** to work, and check that it raises a proper error or warning. Integration tests Integration tests check that the code has an expected output, being blind to its content. This means that if the program should output a new file, the file exists - even if it's empty. This type of tests are normally run on real data and call the program itself. For instance, documentation PRs should check that the documentation page is produced! Functional tests If integration tests and unit tests could have babies, those would be functional tests. In practice, this kind of tests check that an output is produced, and *also* that it contains what it should contain. If a function should output a new file or an object, this test passes only if the file exists *and* it is like we expect it to be. They are run on real or mock data, and call the program itself or a function. Recognising contributors We welcome and recognize all contributions from documentation to testing to code development. You can see a list of current contributors in the README (kept up to date by the all contributors bot ). Thank you! --- Based on contributing guidelines from the STEMMRoleModels project.","title":"Contributorfile"},{"location":"community/contributorfile/#how-to-contribute-to-physiopy","text":"Welcome to the physiopy organisation! It's great news that you're thinking about contributing! Working with many people from many different places is great, but sometimes this means that code can become messy due to the many different ways a contribution can be made. For this reason, we have set up some guidelines for contributions - to help you get involved ASAP! If you lack knowledge in python development / github use / physiological data handling, don't be scared! Try to jump in anyway. Most of the original contributors learned these things exactly this way - jumping in and hoping to fall in the right way without breaking too many bones. Do you want to jump in but don't exactly know where/how? You can drop a few lines in gitter , so we can help you find something that suits you! Already know what you\\'re looking for in this guide? Jump to the following sections: Aims of physiopy Join the conversation Contributions Contributing with small documentation changes Contributing with User testing Contributing with test files Contributing documentation through GitHub Contributing code through GitHub Contributing with Pull Requests Review Issues and Milestones Labels Issues & PRs labels Issues labels PRs labels Good First Issues Contribution workflow Pull Requests Reviewing PRs Style Guide Automatic Testing Recognizing contributors","title":"How to contribute to physiopy"},{"location":"community/contributorfile/#aims-of-physiopy","text":"physiopy is a very young project developed by a bunch of researchers from the two different sides of the Atlantic Ocean (for now). Our main goal is to help collect, analyse and share physiological data, interfacing with (MRI) neuroimaging. We're trying to do so by: Writing packages to make a user-friendly pipeline to deal with physiological data. Writing packages that take into account the use of this physiological data in combination with neuroimaging (MRI) analysis. Providing documentation containing tips and strategies on how to collect such data and use our packages. Help set a standard for these data, albeit without forcing users to use it. Be an excuse for educational purposes on topics like Git/GitHub, Python3, physiology and related tools/topics.","title":"Aims of physiopy"},{"location":"community/contributorfile/#joining-the-conversation","text":"We're trying to keep all conversation related to project development in GitHub issues . We maintain a gitter chat room for more informal conversations and general project updates. We also have a dev call once a month - specifically the second Thursday of the month! If you want to participate, drop a line in gitter! When interacting in the common channels, please adhere to our code of conduct .","title":"Joining the conversation"},{"location":"community/contributorfile/#contributions","text":"","title":"Contributions"},{"location":"community/contributorfile/#contributing-with-small-documentation-changes","text":"If you are new to GitHub and just have a small documentation change recommendation (such as: typos detection, small improvements in the content, ...), please open an issue in the relative project, and label it with the \"Documentation\" label. Chances are those types of changes are easily doable with GitHub\\'s online editor, which means you can do them, or ask for help from the developers!","title":"Contributing with small documentation changes"},{"location":"community/contributorfile/#contributing-with-user-testing","text":"Another, non-coding friendly way to contribute to physiopy is by testing the packages. There are different kinds of tests, but to simplify things you can think mainly about automatic tests and user tests. To know more about Automatic tests , you can read the testing section . User testing are warm, human, emotional and opinionated tests that not only check that the code is doing what it needs to do, but also whether there's a better way to do it - namely better reports, clearer screen outputs, warnings and exceptions, unexpected bugs that have to be corrected. If you want to perform one, open an issue on GitHub or drop a comment in Gitter, refer to this blueprint and don't be afraid to ask questions!","title":"Contributing with User testing"},{"location":"community/contributorfile/#contributing-with-test-files","text":"At physiopy we always try to imagine and support every possible setting out there. However, our imagination has a limit - but if you think our packages should process a specific format/setting that you have, we're more than glad to do so! To make it happen, we need an example of the file we want to process, so you will have to share it with us (and the rest of the world)! The contribution can be a full file of data that you already acquired, a part of that file (pay attention to what is the minimum you need to share!), or mock data. The file contribution should come with a json file of the same name that contains the necessary information to run phys2bids on that file contribution. There is a json blueprint in OSF , you can download it and adapt it. Note that the frequency list has to be expressed in Hz as an integer or float. To contribute with a test file, open an Issue in GitHub and label it with Test . We'll help you add the file in our OSF space. We're extremely grateful for this type of contribution - so grateful that we asked allcontributors to add a dedicated category!","title":"Contributing with test files"},{"location":"community/contributorfile/#contributing-documentation-through-github","text":"We use readthedocs to create our documentation. Every contribution is welcome and it follows the same steps as a code contribution, explained below.","title":"Contributing documentation through GitHub"},{"location":"community/contributorfile/#contributing-code-through-github","text":"This section covers 90% of the contributions a project like physiopy receives - code, documentation and tests. The best way to make this kind of contribution, in a nutshell, is to: 1. Open an issue with the intended modifications. 2. Label it, discuss it, (self-)assign it. 3. Open a Pull Request (PR) to resolve the issue and label it. 4. Wait for a review, discuss it or comply, repeat until ready. Issues and PR chats are great to maintain track of the conversation on the contribution. They are based upon GitHub-flavoured Markdown . GitHub has a helpful page on getting started with writing and formatting Markdown on GitHub .","title":"Contributing code through GitHub"},{"location":"community/contributorfile/#contributing-with-pull-requests-reviews","text":"A big challenge of software development is merging code accurately without having to wait too much time. For this reason, Reviewers for PRs are more than welcome! It is a task that requires some experience, but it's very necessary! Read the related section below to start!","title":"Contributing with Pull Requests Reviews"},{"location":"community/contributorfile/#issues-and-milestones","text":"At physiopy , we use Issues and Milestones to keep track of and organise our workflow. Issues describe pieces of work that need to be completed to move the project forwards. We try to keep them as simple and clear as possible: an issue should describe a unitary, possibly small piece of work (unless it's about refactoring). Don't be scared of opening many issues at once, if it makes sense! Just check that what you're proposing is not listed in a previous issue (open or closed) yet (we don't like doubles). Issues get labelled. That helps the contributors to know what they're about. Check the label list to know what types are there, and use them accordingly! Issues can also be assigned . If you want to work on an assigned issue, ask permission first! - Milestones set the higher level workflow. They sketch deadlines and important releases. Issues are assigned to these milestones by the maintainers. If you feel that an issue should be assigned to a specific milestone but the maintainers have not done so, discuss it in the issue chat or in Gitter! We might have just missed it, or we might not (yet) see how it aligns with the overall project structure/milestone.","title":"Issues and Milestones"},{"location":"community/contributorfile/#labels","text":"The current list of labels are here . They can be used for Issues , PRs , or both. We use auto to automate our semantic versioning and Pypi upload, so it\\'s extremely important to use the right PR labels !","title":"Labels"},{"location":"community/contributorfile/#issue-pr-labels","text":"Documentation: Improvements or additions to documentation. This category includes (but is not limited to) docs pages, docstrings, and code comments. Duplicate: Whatever this is, it exists already! Maybe it's a closed Issue/PR, that should be reopened. Enhancement: New features added or requested. This normally goes with a minormod label for PRs. Outreach: As part of the scientific community, we care about outreach. Check the relevant section about it, but know that this Issue/PR contains information or tasks about abstracts, talks, demonstrations, papers. Paused: Issue or PR should not be worked on until the resolution of other issues or PRs. Testing: This is for testing features, writing tests or producing testing code. Both user testing and CI testing! Urgent: If you don\\'t know where to start, start here! This is probably related to a milestone due soon!","title":"Issue &amp; PR labels"},{"location":"community/contributorfile/#issue-only-labels","text":"Bug: Something isn't working. It either breaks the code or has an unexpected outcome. Community: This issue contains information about the physiopy community (e.g. the next developer call) Discussion: Discussion of a concept or implementation. These Issues are prone to be open ad infinitum. Jump in the conversation if you want! Good first issue: Good for newcomers. These issues calls for a fairly easy enhancement, or for a change that helps/requires getting to know the code better. They have educational value, and for this reason, unless urgent, experts in the topic should refrain from closing them - but help newcomers closing them. Hacktoberfest: Dedicated to the hacktoberfest event, so that people can help and feel good about it (and show it with a T-shirt!). Such commits will not be recognised in the all-contributor table, unless otherwise specified . Help wanted: Extra attention is needed here! It's a good place to have a look! Refactoring: Improve nonfunctional attributes. Which means rewriting the code or the documentation to improve performance or just because there's a better way to express those lines. It might create a majormod PR. Question: Further information is requested, from users to developers. Try to respond to this! Wontfix: This will not be worked on, until further notice.","title":"Issue-only labels"},{"location":"community/contributorfile/#pr-only-labels","text":"","title":"PR-only labels"},{"location":"community/contributorfile/#labels-for-semantic-release-and-changelogs","text":"Majormod: These PRs call for a new major release (+1.0.0). This means that the PR is breaking backward compatibility. Minormod: These PRs call for a new minor release (0.+1.0). This means that the PR is not breaking backward compatibility. BugFIX: These PRs close an issue labelled bug . They also increase the semantic versioning for fixes (+0.0.1). Internal: This PR contains changes to the internal API. It won\\'t trigger a release, but it will be reported in the changelog. Documentation: See above. This PR won\\'t trigger a release, but it will be reported in the changelog. Testing: See above. This PR won\\'t trigger a release, but it will be reported in the changelog. Skip release: This PR will not trigger a release. Release: This PR will force the trigger of a release.","title":"Labels for semantic release and changelogs"},{"location":"community/contributorfile/#other-labels","text":"Invalid: These PRs don't seem right. They actually seem so not right that they won't be further processed. This label invalidates a Hacktoberfest contribution. If you think this is wrong, start a discussion in the relevant issue (or open one if missing). Reviewers are asked to give an explanation for the use of this label.","title":"Other labels"},{"location":"community/contributorfile/#good-first-issues","text":"Good First Issues are issues that are either very simple, or that help the contributor get to know the programs or the languages better. We use it to help contributors with less experience to learn and familiarise with Git, GitHub, Python3, and physiology. We invite more expert contributors to avoid those issues, leave them to beginners and possibly help them out in the resolution of the issue. However, if the issue is left unassigned or unattended for long, and it's considered important or urgent, anyone can tackle it.","title":"Good First Issues"},{"location":"community/contributorfile/#contribution-workflow","text":"There are many descriptions of a good contribution workflow out there. For instance, we suggest to have a look at tedana's workflow . At physiopy , we follow a very similar workflow. The only three differences are: If you see an open issue that you would like to work on, check if it is assigned. If it is, ask the assignee if they need help or want to be substituted before starting to work on it. We ask you to test the code locally before merging it, and then, if possible, write some automatic tests for the code to be run in our Continuous Integration! Check the testing section below to know more. We suggest opening a draft PR as soon as you can - so it's easier for us to help you! See our complete documentation on the matter","title":"Contribution workflow"},{"location":"community/contributorfile/#pull-requests","text":"To improve understanding pull requests \\\"at a glance\\\" and use the power of auto , we use the labels listed above. Multiple labels can be assigned to a PR - in fact, all those that you think are relevant. We strongly advise to keep the changes you\\'re introducing with your PR limited to your original goal. Adding to the scope of your PR little style corrections or code refactoring here and there in the code that you\\'re already modifying is a great help, but when they become too much (and they are not relevant to your PR) they risk complicating the nature of the PR and the reviewing process. It is much better to open another PR with the objective of doing such corrections! Moreover, if you\\'re tempted to assign more than one label that would trigger a release (e.g. bug and minormod or bug and majormod, etc.), you might want to split your PR instead. When opening a pull request, assign it at least one label. We encourage you to open a PR as soon as possible - even before you finish working on them. This is useful especially to you - so that you can receive comments and suggestions early on, rather than having to process a lot of comments in the final review step! However, if it's an incomplete PR, please open a Draft PR . That helps us process PRs by knowing which one to have a look first - and how picky to be when doing so. Reviewing PRs is a time consuming task and it can be stressful for both the reviewer and the author. Avoiding wasting time and the need of little fixes - such as fixing grammar mistakes and typos, styling code, or adopting conventions - is a good start for a successful (and quick) review. Before graduating a Draft PR to a PR ready for review, please check that: You did all you wanted to include in your PR. If at a later stage you realize something is missing and it's not a minor thing, you will need to open a new PR. If your contribution contains code or tests, you ran and passed all of the tests locally with pytest . If you're writing documentation, you built it locally with sphinx and the format is what you intended. Your code is harmonious with the rest of the code - no repetitions of any sort! Your code respects the adopted Style , especially if: Your code is lintered adequately and respects the PEP8 convention. Your docstrings follow the numpydoc convention. There are no typos or grammatical mistakes and the text is fluid. The code is sufficiently commented and the comments are clear. Your PR title is clear enough to be meaningful when appended to the version changelog. You have the correct labels.","title":"Pull Requests"},{"location":"community/contributorfile/#to-be-merged-prs-have-to","text":"Pass all the CircleCI tests, and possibly all the codecov checks. Have the necessary amount of approving reviews, even if you're a long time contributor. Note : You can ask one (or more) contributor to do that review, if you think they align more with the content of your PR. You need one review for documentation, tests, and small changes, and two reviews for bugs, refactoring and enhancements. 3. Have at least a release-related label (or a Skip release label). 4. Have a short title that clearly explains in one sentence the aim of the PR. 5. Contain at least a unit test for your contribution, if the PR contains code (it would be better if it contains an integration or function test and all the breaking tests necessary). If you're not confident about writing tests, it is possible to refer to an issue that asks for the test to be written, or another (Draft) PR that contains the tests required. As we're trying to maintain at least 90% code coverage, you're strongly encouraged to write all of the tests necessary to keep coverage above that threshold. If coverage drops too low, you might be asked to add more tests and/or your PR might be rejected. See the Automatic testing section. Don't merge your own pull request! That\\'s a task for the main reviewer of your PR or the project manager. Remember that the project manager doesn't have to be a reviewer of your PR!","title":"To be merged, PRs have to:"},{"location":"community/contributorfile/#reviewing-prs","text":"Reviewing PRs is an extremely important task in collaborative development. In fact, it is probably the task that requires the most time in the development, and it can be stressful for both the reviewer and the author. Remember that, as a PR Reviewer, you are guaranteeing that the changes work and integrate well with the rest of the repository, hence you are responsible for the quality of the repository and its next version release . If they don\\'t integrate well, later PR reviewers might have to ask for broader changes than expected. There are many best practices to review code online, for instance this medium blog post , but here are some good rules of thumbs that we need to follow while reviewing PRs: Be respectful to the PR authors and be clear in what you are asking/suggesting - remember that, like you, they are contributing their spare time and doing their best job! If there is a Draft PR , you can comment on its development in the message board or making \"Comment\" reviews. Don't ask for changes, and especially, don't approve the PR If the PR graduated from Draft to full PR , check that it follows the sections Pull requests and Style Guide of these guidelines. If not, invite the author to do so before starting a review. Don't limit your review to the parts that are changed . Look at the entire file, see if the changes fit well in it, and see if the changes are properly addressed everywhere in the code - in the documentation, in the tests, and in other functions. Sometimes the differences reported don't show the full impact of the PR in the repository! If your want to make Pull Requests an educational process, invite the author of the PR to make changes before actually doing them yourself. Request changes via comments or in the message board or by checking out the PR locally, making changes and then submitting a PR to the author's branch. If you decide to use the suggestion tool in reviews, or to start a PR to the branch under review, please alert the Project Manager. Bots might automatically assign you contribution types that will have to be removed (remember, your contribution in this case is \"Reviewer\"). Instead of starting a PR to the branch under review, think about opening a new PR with those modifications (unless they are needed to pass tests), and alert the Main Reviewer. In any case don't commit directly to the branch under review ! If you're reviewing documentation, build it locally with sphinx-build command. If you're asking for changes, don't approve the PR . Approve it only after everything was sufficiently addressed. Someone else might merge the PR in taking your word for granted. If you are the main reviewer, and the last reviewer required to approve the PR, merge the PR! Before approving and/or merging PRs, be sure that: All the tests in CircleCI/Azure pass without errors. Prefereably, codecov checks pass as well. If they don\\'t, discuss what to do. The title describes the content of the PR clearly enough to be meaningful on its own - remember that it will appear in the version changelog! The PR has the appropriate labels to trigger the appropriate version release and update the contributors table.","title":"Reviewing PRs"},{"location":"community/contributorfile/#main-reviewer","text":"At physiopy we use the Assignees section of a PR to mark the main reviewer for that PR. The main reviewer is the primary person responsible for the quality of the repository and its next version release , as well as for the behaviour of the other reviewers . The main reviewer takes care of the reviewing process of the PR, in particular: Invites the reviewers to finish their review in a relatively short time. Checks that all elements of this document were respected, especially the part about Pull Requests . Invites other Reviewers to respect this document, especially the part about reviews , helps them in doing so, and checks that they do. If a Reviewer keeps not respecting this document, flags them to the project manager. Decides what to do in case of a coverage decrease (in codecov/patch ). In case of missing tests or updates to user documentation: Asks for more documentation or tests before approving the PR, or Checks that the appropriate issues have been opened to address the lack of documentation or tests (1 issue per item), or Double-checks that the title is clear and the labels are correct to trigger an appropriate auto release - feel free to change them. Main reviewer Is the one that is going to merge the PR. After the PR has been merged and a new release has been triggered, checks that: The documentation was updated correctly (if changed). The Pypi version of the repository coincides with the new release (if changed). New contributors or forms of contributions were correctly added in the README (if changed).","title":"Main reviewer"},{"location":"community/contributorfile/#style-guide","text":"Docstrings should follow numpydoc convention. We encourage extensive documentation. The python code itself should follow PEP8 convention whenever possible: there are continuous integration tests checking that! You can use linters to help you write your code following style conventions. Linters are add-ons that you can run on the written script file. We suggest the use of flake8 for Python 3. Many editors (Atom, VScode, Sublimetext, ...) support addons for online lintering, which means you'll see warnings and errors while you write the code - check out if your does! Since we adopt auto , the PR title will be automatically reported as part of the changelog when updating versions. Try to describe in one (short) sentence what your PR is about - possibly using the imperative and starting with a capital letter. For instance, a good PR title could be: Implement support for <randomtype> files or Reorder dictionary entries , rather than <randomtype> support or reorders keys .","title":"Style Guide"},{"location":"community/contributorfile/#automatic-testing","text":"physiopy uses Continuous Integration (CI) to make life easier. In particular, we use the CircleCI platform to run automatic testing! Automatic tests are cold, robotic, emotionless, and opinionless tests that check that the program is doing what it is expected to. They are written by the developers and run (by CircleCI) every time they send a Pull Request to physiopy repositories. They complement the warm, human, emotional and opinionated user tests , as they tell us if a piece of code is failing. CircleCI uses pytest to run the tests. The great thing about it is that you can run it in advance on your local version of the code! We can measure the amount of code that is tested with codecov , which is an indication of how reliable our packages are! We try to maintain a 90% code coverage, and for this reason, PR should contain tests! The four main type of tests we use are: Unit tests : Unit tests check that a minimal piece of code is doing what it should be doing. Normally this means calling a function with some mock parameters and checking that the output is equal to the expected output. For example, to test a function that adds two given numbers together (1 and 3), we would call the function with those parameters, and check that the output is 4. Breaking tests Breaking tests are what you expect - they check that the program is breaking when it should. This means calling a function with parameters that are expected **not** to work, and check that it raises a proper error or warning. Integration tests Integration tests check that the code has an expected output, being blind to its content. This means that if the program should output a new file, the file exists - even if it's empty. This type of tests are normally run on real data and call the program itself. For instance, documentation PRs should check that the documentation page is produced! Functional tests If integration tests and unit tests could have babies, those would be functional tests. In practice, this kind of tests check that an output is produced, and *also* that it contains what it should contain. If a function should output a new file or an object, this test passes only if the file exists *and* it is like we expect it to be. They are run on real or mock data, and call the program itself or a function.","title":"Automatic Testing"},{"location":"community/contributorfile/#recognising-contributors","text":"We welcome and recognize all contributions from documentation to testing to code development. You can see a list of current contributors in the README (kept up to date by the all contributors bot ). Thank you! --- Based on contributing guidelines from the STEMMRoleModels project.","title":"Recognising contributors"},{"location":"community/gettingstarted/","text":"Getting Started! ========================== First of all: thank you! Contributions can be made in different ways, not only code! As we follow the all-contributors specification, any contribution will be recognised accordingly. Follow these steps to get started: Have a look at the contributor guide page as well as the code of conduct . Make sure that you have a GitHub account. You can set up a free GitHub account ; here are some instructions . If you intend to contribute code and/or use the physiopy packages in any way, check that you have git and pip installed on your system. Then install the package as a developer. This will let you run the program with the latest modifications, without requiring to re-install it every time. Note The following instructions are provided assuming that python 3 is not your default version of python. If it is, you might need to use pip instead of pip3 , although some OSs do adopt pip3 anyway. If you want to check, type python --version in a terminal. Linux, Mac, and Windows developer installation Be sure to have git and pip installed. Fork the phys2bids repository in GitHub, then open a terminal and run the following code to clone the forked repository and set it as your `origin`: git clone https://github.com/{username}/{physiopy-package}.git # or in case you prefer to use ssh: git clone git@github.com:{username}/{physiopy-package}.git We also recommend to set up the physiopy/{physiopy-package} repository as upstream . In this way you can always keep your main branch up to date with the command git pull upstream master : cd {physiopy-package} git remote add upstream https://github.com/physiopy/{physiopy-package}.git git pull upstream master Basic installation If you use python frequently, or you are a python developer, chances are that all the necessary dependencies are already installed in your system. Go to a physiopy package directory (e.g. the phys2bids folder) and execute the command: pip3 install -e . Full developer installation If it's your first experience as a python developer, or you just want to be sure that you have everything you need to collaborate with us, you can install phys2bids with all the other packages that we frequently use during development in one step! Go to a physiopy package directory (e.g. the phys2bids folder) and execute the command: pip3 install -e .[all] This will install: phys2bids as an editable package, which means that you can modify the program and run it without having to reinstall it every time! All phys2bids dependencies. All interface modules, that deal with the interfaces for all the file formats. All style modules, such as flake8 , to help you linter the code! All documentation modules, like sphinx , so that you can build the docs locally before submitting them. All test modules, like pytest , in order for you to test your code locally before committing it! Check your installation! Type the commands: cd phys2bids/tests pytest This will execute the tests locally and check that your phys2bids installation works properly. pytest =================================== test session starts =================================== platform win32 -- Python 3.8.6, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: C:\\Users\\sento\\phys2bids, configfile: setup.cfg plugins: cov-2.10.1 collected 61 items test_acq.py . [ 1%] test_bids.py ................ [ 27%] test_integration.py ... [ 32%] test_phys2bids.py ... [ 37%] test_physio_obj.py ....... [ 49%] test_txt.py .................. [ 78%] test_utils.py ........... [ 96%] test_viz.py .x [100%] ================================= short test summary info ================================= XFAIL test_viz.py::test_plot_trigger ======================== 60 passed, 1 xfailed in 142.58s (0:02:22) ======================== Do not worry if there is a xfail error in the log. This happens when we know that a test will fail for known reasons, and we are probably working to fix it (see here . However, if you do encounter any other error, check that you have all the extra dependencies installed and their version meets phys2bids requirements. Contact us on gitter if you need help!","title":"Getting Started"},{"location":"community/gettingstarted/#getting-started","text":"========================== First of all: thank you! Contributions can be made in different ways, not only code! As we follow the all-contributors specification, any contribution will be recognised accordingly. Follow these steps to get started: Have a look at the contributor guide page as well as the code of conduct . Make sure that you have a GitHub account. You can set up a free GitHub account ; here are some instructions . If you intend to contribute code and/or use the physiopy packages in any way, check that you have git and pip installed on your system. Then install the package as a developer. This will let you run the program with the latest modifications, without requiring to re-install it every time.","title":"Getting Started!"},{"location":"community/gettingstarted/#note","text":"The following instructions are provided assuming that python 3 is not your default version of python. If it is, you might need to use pip instead of pip3 , although some OSs do adopt pip3 anyway. If you want to check, type python --version in a terminal.","title":"Note"},{"location":"community/gettingstarted/#linux-mac-and-windows-developer-installation","text":"Be sure to have git and pip installed. Fork the phys2bids repository in GitHub, then open a terminal and run the following code to clone the forked repository and set it as your `origin`: git clone https://github.com/{username}/{physiopy-package}.git # or in case you prefer to use ssh: git clone git@github.com:{username}/{physiopy-package}.git We also recommend to set up the physiopy/{physiopy-package} repository as upstream . In this way you can always keep your main branch up to date with the command git pull upstream master : cd {physiopy-package} git remote add upstream https://github.com/physiopy/{physiopy-package}.git git pull upstream master","title":"Linux, Mac, and Windows developer installation"},{"location":"community/gettingstarted/#basic-installation","text":"If you use python frequently, or you are a python developer, chances are that all the necessary dependencies are already installed in your system. Go to a physiopy package directory (e.g. the phys2bids folder) and execute the command: pip3 install -e .","title":"Basic installation"},{"location":"community/gettingstarted/#full-developer-installation","text":"If it's your first experience as a python developer, or you just want to be sure that you have everything you need to collaborate with us, you can install phys2bids with all the other packages that we frequently use during development in one step! Go to a physiopy package directory (e.g. the phys2bids folder) and execute the command: pip3 install -e .[all] This will install: phys2bids as an editable package, which means that you can modify the program and run it without having to reinstall it every time! All phys2bids dependencies. All interface modules, that deal with the interfaces for all the file formats. All style modules, such as flake8 , to help you linter the code! All documentation modules, like sphinx , so that you can build the docs locally before submitting them. All test modules, like pytest , in order for you to test your code locally before committing it!","title":"Full developer installation"},{"location":"community/gettingstarted/#check-your-installation","text":"Type the commands: cd phys2bids/tests pytest This will execute the tests locally and check that your phys2bids installation works properly. pytest =================================== test session starts =================================== platform win32 -- Python 3.8.6, pytest-6.1.1, py-1.9.0, pluggy-0.13.1 rootdir: C:\\Users\\sento\\phys2bids, configfile: setup.cfg plugins: cov-2.10.1 collected 61 items test_acq.py . [ 1%] test_bids.py ................ [ 27%] test_integration.py ... [ 32%] test_phys2bids.py ... [ 37%] test_physio_obj.py ....... [ 49%] test_txt.py .................. [ 78%] test_utils.py ........... [ 96%] test_viz.py .x [100%] ================================= short test summary info ================================= XFAIL test_viz.py::test_plot_trigger ======================== 60 passed, 1 xfailed in 142.58s (0:02:22) ======================== Do not worry if there is a xfail error in the log. This happens when we know that a test will fail for known reasons, and we are probably working to fix it (see here . However, if you do encounter any other error, check that you have all the extra dependencies installed and their version meets phys2bids requirements. Contact us on gitter if you need help!","title":"Check your installation!"},{"location":"community/members/","text":"","title":"Members"},{"location":"community/open_datasets/","text":"Open Datasets","title":"Open Datasets"},{"location":"community/open_datasets/#open-datasets","text":"","title":"Open Datasets"},{"location":"community/other_tools/","text":"Other Tools Similar projects: PhysIO toolbox that supports data processing, denoising, and modelling for the purpose of physiological denoising (depends on SPM and only runs on MATLAB, requiring a license). PhysIO and physiopy developers have expressed interest in collaborating with each other. Other toolboxes with a narrower scope than physiopy\u2019s: NeuroKit which offers back-end solutions for physiological data denoising. AFNI and Quantiphyse offer, among other functionalities, physiological data analysis or modelling in a complementary way to physiopy. Physiopy\u2019s developers are in contact with the developers of these software packages to collaborate on improving between-project integration. Other proprietary software tools used in this field for data collection and analysis: Acqknowledge LabChart Spike2 Physiopy supports most of these proprietary data formats.","title":"Other Tools"},{"location":"community/other_tools/#other-tools","text":"","title":"Other Tools"},{"location":"community/other_tools/#similar-projects","text":"PhysIO toolbox that supports data processing, denoising, and modelling for the purpose of physiological denoising (depends on SPM and only runs on MATLAB, requiring a license). PhysIO and physiopy developers have expressed interest in collaborating with each other.","title":"Similar projects:"},{"location":"community/other_tools/#other-toolboxes-with-a-narrower-scope-than-physiopys","text":"NeuroKit which offers back-end solutions for physiological data denoising. AFNI and Quantiphyse offer, among other functionalities, physiological data analysis or modelling in a complementary way to physiopy. Physiopy\u2019s developers are in contact with the developers of these software packages to collaborate on improving between-project integration.","title":"Other toolboxes with a narrower scope than physiopy\u2019s:"},{"location":"community/other_tools/#other-proprietary-software-tools-used-in-this-field-for-data-collection-and-analysis","text":"Acqknowledge LabChart Spike2 Physiopy supports most of these proprietary data formats.","title":"Other proprietary software tools used in this field for data collection and analysis:"},{"location":"community/team/","text":"Team Project Leader(s): Stefano Moia - Postdoc researcher at the \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne Contributors: Thanks goes to these wonderful people for all their help (see emoji key )! - Phys2bids Contributors - Peakdet Contributors - Phys2denoise Contributors This could be you! We welcome all skill levels with an interest in physiological data collection. Join a meeting and figure out how you can get involved, or check out the contributions guide. This project follows the all-contributors specification, meaning that contributions of any kind are recognized as such. Contributors \u2728 Thanks goes to these wonderful people ( emoji key ): Daniel Alcal\u00e1 \ud83c\udfa8 Apoorva Ayyagari \ud83d\udd8b \ud83d\udd23 \ud83d\udcd6 Katie Bottenhorn \ud83d\udcbb \ud83e\uddd1\u200d\ud83c\udfeb \ud83d\udc40 Molly Bright \ud83d\udd8b \ud83d\udd23 \ud83e\udd14 Cesar Caballero Gaudes \ud83d\udd8b \ud83d\udd23 \ud83e\udd14 In\u00e9s Chavarr\u00eda \ud83d\udcbb Vicente Ferrer \ud83d\udc1b \ud83d\udcbb \ud83d\udcd6 \ud83d\udc40 \u26a0\ufe0f Yaroslav Halchenko \ud83d\ude87 Soichi Hayashi \ud83d\udc1b Vittorio Iacovella \ud83d\udcbb Fran\u00e7ois Lespinasse \ud83d\udcbb \u26a0\ufe0f Ross Markello \ud83d\udc1b \ud83d\udcbb \ud83d\udd8b \ud83e\udd14 \ud83d\ude87 \ud83d\udc40 \u26a0\ufe0f \ud83e\uddd1\u200d\ud83c\udfeb Stefano Moia \ud83d\udcbb \ud83d\udd8b \ud83d\udd23 \ud83e\udd14 \ud83d\ude87 \ud83d\udcc6 \ud83d\udc40 \ud83d\udcd6 \ud83e\uddd1\u200d\ud83c\udfeb Robert Oostenveld \ud83e\udd14 \ud83d\udc40 David Romero-Bascones \ud83d\udc1b \ud83d\udcbb \ud83d\udcd6 Taylor Salo \ud83e\udd14 \ud83d\udcbb \ud83d\udc40 Rachael Stickland \ud83d\udc1b \ud83d\udcbb \ud83d\udd23 \ud83d\udcd6 \ud83d\udcd3 \ud83d\udc40 Eneko Uru\u00f1uela \ud83d\udc1b \ud83d\udcbb \ud83d\ude87 \ud83d\udc40 \u26a0\ufe0f \ud83e\uddd1\u200d\ud83c\udfeb merelvdthiel \ud83d\udcbb Kristina Zvolanek \ud83d\udd23 \ud83d\udd8b \ud83d\udcd6 Marcel Zwiers \ud83d\udd0c victox5 \ud83d\udcd6 Yu-Fang Yang \ud83d\udcd6 Sarah Goodale \ud83d\udcd6 Neville Magielse \ud83d\udcd6 In\u00eas Esteves \ud83d\udcd6","title":"Team"},{"location":"community/team/#team","text":"Project Leader(s): Stefano Moia - Postdoc researcher at the \u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne Contributors: Thanks goes to these wonderful people for all their help (see emoji key )! - Phys2bids Contributors - Peakdet Contributors - Phys2denoise Contributors This could be you! We welcome all skill levels with an interest in physiological data collection. Join a meeting and figure out how you can get involved, or check out the contributions guide. This project follows the all-contributors specification, meaning that contributions of any kind are recognized as such.","title":"Team"},{"location":"community/team/#contributors","text":"Thanks goes to these wonderful people ( emoji key ): Daniel Alcal\u00e1 \ud83c\udfa8 Apoorva Ayyagari \ud83d\udd8b \ud83d\udd23 \ud83d\udcd6 Katie Bottenhorn \ud83d\udcbb \ud83e\uddd1\u200d\ud83c\udfeb \ud83d\udc40 Molly Bright \ud83d\udd8b \ud83d\udd23 \ud83e\udd14 Cesar Caballero Gaudes \ud83d\udd8b \ud83d\udd23 \ud83e\udd14 In\u00e9s Chavarr\u00eda \ud83d\udcbb Vicente Ferrer \ud83d\udc1b \ud83d\udcbb \ud83d\udcd6 \ud83d\udc40 \u26a0\ufe0f Yaroslav Halchenko \ud83d\ude87 Soichi Hayashi \ud83d\udc1b Vittorio Iacovella \ud83d\udcbb Fran\u00e7ois Lespinasse \ud83d\udcbb \u26a0\ufe0f Ross Markello \ud83d\udc1b \ud83d\udcbb \ud83d\udd8b \ud83e\udd14 \ud83d\ude87 \ud83d\udc40 \u26a0\ufe0f \ud83e\uddd1\u200d\ud83c\udfeb Stefano Moia \ud83d\udcbb \ud83d\udd8b \ud83d\udd23 \ud83e\udd14 \ud83d\ude87 \ud83d\udcc6 \ud83d\udc40 \ud83d\udcd6 \ud83e\uddd1\u200d\ud83c\udfeb Robert Oostenveld \ud83e\udd14 \ud83d\udc40 David Romero-Bascones \ud83d\udc1b \ud83d\udcbb \ud83d\udcd6 Taylor Salo \ud83e\udd14 \ud83d\udcbb \ud83d\udc40 Rachael Stickland \ud83d\udc1b \ud83d\udcbb \ud83d\udd23 \ud83d\udcd6 \ud83d\udcd3 \ud83d\udc40 Eneko Uru\u00f1uela \ud83d\udc1b \ud83d\udcbb \ud83d\ude87 \ud83d\udc40 \u26a0\ufe0f \ud83e\uddd1\u200d\ud83c\udfeb merelvdthiel \ud83d\udcbb Kristina Zvolanek \ud83d\udd23 \ud83d\udd8b \ud83d\udcd6 Marcel Zwiers \ud83d\udd0c victox5 \ud83d\udcd6 Yu-Fang Yang \ud83d\udcd6 Sarah Goodale \ud83d\udcd6 Neville Magielse \ud83d\udcd6 In\u00eas Esteves \ud83d\udcd6","title":"Contributors \u2728"},{"location":"devs/releases/","text":"","title":"Releases"},{"location":"devs/versions/","text":"","title":"Versions"},{"location":"libraries/peakdet/","text":"Peakdet A toolbox for physiological peak detection analyses This package peakdet is designed for use in the reproducible processing and analysis of physiological data, like those collected from respiratory belts, pulse photoplethysmography, or electrocardiogram (ECG/EKG) monitors. For github repository, follow this link Overview Physiological data are messy and prone to artifact (e.g., movement in respiration and pulse, ectopic beats in ECG). Despite leaps and bounds in recent algorithms for processing these data there still exists a need for manual inspection to ensure such artifacts have been appropriately removed. Because of this manual intervention step, understanding exactly what happened to go from \"raw\" data to \"analysis-ready\" data can often be difficult or impossible. This toolbox, peakdet , aims to provide a set of tools that will work with a variety of input data to reproducibly generate manually-corrected, analysis- ready physiological data. If you'd like more information about the package, including how to install it and some example instructions on its use, check out our documentation Installation and User Guide Follow this for more information on installation and setup of peakdet as well as ways to get involved in the development and testing of this package. The user guide also provided at the link above discusses the reproducibility of loading and saving data, as well as, the processing and editing of the physiological data. License Information This codebase is licensed under the Apache License, Version 2.0. The full license can be found in the LICENSE file in the peakdet distribution. You may also obtain a copy of the license here .","title":"peakdet"},{"location":"libraries/peakdet/#peakdet","text":"","title":"Peakdet"},{"location":"libraries/peakdet/#a-toolbox-for-physiological-peak-detection-analyses","text":"This package peakdet is designed for use in the reproducible processing and analysis of physiological data, like those collected from respiratory belts, pulse photoplethysmography, or electrocardiogram (ECG/EKG) monitors. For github repository, follow this link","title":"A toolbox for physiological peak detection analyses"},{"location":"libraries/peakdet/#overview","text":"Physiological data are messy and prone to artifact (e.g., movement in respiration and pulse, ectopic beats in ECG). Despite leaps and bounds in recent algorithms for processing these data there still exists a need for manual inspection to ensure such artifacts have been appropriately removed. Because of this manual intervention step, understanding exactly what happened to go from \"raw\" data to \"analysis-ready\" data can often be difficult or impossible. This toolbox, peakdet , aims to provide a set of tools that will work with a variety of input data to reproducibly generate manually-corrected, analysis- ready physiological data. If you'd like more information about the package, including how to install it and some example instructions on its use, check out our documentation","title":"Overview"},{"location":"libraries/peakdet/#installation-and-user-guide","text":"Follow this for more information on installation and setup of peakdet as well as ways to get involved in the development and testing of this package. The user guide also provided at the link above discusses the reproducibility of loading and saving data, as well as, the processing and editing of the physiological data.","title":"Installation and User Guide"},{"location":"libraries/peakdet/#license-information","text":"This codebase is licensed under the Apache License, Version 2.0. The full license can be found in the LICENSE file in the peakdet distribution. You may also obtain a copy of the license here .","title":"License Information"},{"location":"libraries/phys2bids/","text":"Phys2bids A python3 library to format physiological files in BIDS It was born for AcqKnowledge files (BIOPAC), and at the moment it supports .acq files as well as .txt files obtained by labchart (ADInstruments). We're also adding support for MRI-produced files, let us know if you're interested in collaborating to implement support! Overview The Brain Imaging Data Standard (BIDS) is the most commonly used standard for organizing neuroimaging data. Phys2bids was origianlly developed by neuroscientists who wanted to standarize the ability to examine the relationship between physiology and brain function as there are many different data formats. Follow the links for more information on how to install and use phys2bids , as well as the importance of standarization to BIDS format and more . License Information Copyright 2019, The Phys2BIDS community. Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License here . Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"phys2bids"},{"location":"libraries/phys2bids/#phys2bids","text":"","title":"Phys2bids"},{"location":"libraries/phys2bids/#a-python3-library-to-format-physiological-files-in-bids","text":"It was born for AcqKnowledge files (BIOPAC), and at the moment it supports .acq files as well as .txt files obtained by labchart (ADInstruments). We're also adding support for MRI-produced files, let us know if you're interested in collaborating to implement support!","title":"A python3 library to format physiological files in BIDS"},{"location":"libraries/phys2bids/#overview","text":"The Brain Imaging Data Standard (BIDS) is the most commonly used standard for organizing neuroimaging data. Phys2bids was origianlly developed by neuroscientists who wanted to standarize the ability to examine the relationship between physiology and brain function as there are many different data formats. Follow the links for more information on how to install and use phys2bids , as well as the importance of standarization to BIDS format and more .","title":"Overview"},{"location":"libraries/phys2bids/#license-information","text":"Copyright 2019, The Phys2BIDS community. Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License here . Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License Information"},{"location":"libraries/phys2denoise/","text":"Phys2denoise A collection of scripts to prepare physiogloical data for fMRI denoising This project phys2denoise is currently under development, see link for current repository and status. Any suggestions/bug report is welcome! Feel free to open an issue . This project follows the all-contributers specification. Contributions of any kind welcome! License Information Copyright 2019, The phys2denoise community. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License here . Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"phys2denoise"},{"location":"libraries/phys2denoise/#phys2denoise","text":"","title":"Phys2denoise"},{"location":"libraries/phys2denoise/#a-collection-of-scripts-to-prepare-physiogloical-data-for-fmri-denoising","text":"This project phys2denoise is currently under development, see link for current repository and status. Any suggestions/bug report is welcome! Feel free to open an issue . This project follows the all-contributers specification. Contributions of any kind welcome!","title":"A collection of scripts to prepare physiogloical data for fMRI denoising"},{"location":"libraries/phys2denoise/#license-information","text":"Copyright 2019, The phys2denoise community. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License here . Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License Information"}]}